{"version":3,"sources":["error/ConfigurationError.js","GridLayout.js","mixin/ReadOnlyAttributes.js","TopPlayerHTMLElement.js","TopDiceBoardHTMLElement.js","TopDieHTMLElement.js","TopPlayerListHTMLElement.js","twenty-one-pips.js"],"names":["ConfigurationError","Error","[object Object]","message","super","FULL_CIRCLE_IN_DEGREES","randomizeCenter","n","Math","random","floor","ceil","call","_width","WeakMap","_height","_cols","_rows","_dice","_dieSize","_dispersion","_rotate","GridLayout","width","height","dispersion","dieSize","set","this","get","w","_calculateGrid","h","maximumNumberOfDice","d","ds","rotate","r","undefined","_center","row","col","dice","length","lenght","alreadyLayoutDice","diceToLayout","die","hasCoordinates","isHeld","push","max","min","availableCells","_computeAvailableCells","randomIndex","randomCell","splice","coordinates","_numberToCoordinates","rotation","round","available","Set","level","maxLevel","size","cell","_cellsOnLevel","_cellIsEmpty","add","Array","from","cells","center","_cellToNumber","find","_coordinatesToNumber","trunc","_cellToCoords","_numberToCell","coords","_coordsToCell","x","y","cornerCell","corner","widthIn","widthOut","heightIn","heightOut","snapTo","q","coverage","filter","quadrant","reduce","maxQ","point","xFit","yFit","attribute2property","name","first","rest","split","map","word","slice","toUpperCase","join","ReadOnlyAttributes","Sup","oldValue","newValue","property","connected","setAttribute","COLOR_ATTRIBUTE","NAME_ATTRIBUTE","SCORE_ATTRIBUTE","HAS_TURN_ATTRIBUTE","_color","_name","_score","_hasTurn","TopPlayerHTMLElement","HTMLElement","color","score","hasTurn","hasAttribute","getAttribute","Number","isNaN","parseInt","observedAttributes","newScore","removeAttribute","isConnected","parentNode","dispatchEvent","CustomEvent","detail","player","other","window","customElements","define","DEFAULT_SYSTEM_PLAYER","DEFAULT_DIE_SIZE","DEFAULT_HOLD_DURATION","DEFAULT_DRAGGING_DICE_DISABLED","DEFAULT_HOLDING_DICE_DISABLED","DEFAULT_ROTATING_DICE_DISABLED","ROWS","COLS","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_DISPERSION","MIN_DELTA","WIDTH_ATTRIBUTE","HEIGHT_ATTRIBUTE","DISPERSION_ATTRIBUTE","DIE_SIZE_ATTRIBUTE","DRAGGING_DICE_DISABLED_ATTRIBUTE","HOLDING_DICE_DISABLED_ATTRIBUTE","ROTATING_DICE_DISABLED_ATTRIBUTE","HOLD_DURATION_ATTRIBUTE","parseNumber","numberString","defaultNumber","number","validatePositiveNumber","maxNumber","Infinity","getPositiveNumber","defaultValue","value","getPositiveNumberAttribute","element","valueString","getBoolean","booleanString","trueValue","getBooleanAttribute","_canvas","_layout","_currentPlayer","_numberOfReadyDice","context","board","getContext","getReadyDice","updateReadyDice","update","isReady","updateBoard","clearRect","render","NONE","Symbol","HOLD","MOVE","INDETERMINED","DRAGGING","convertWindowCoordinatesToCanvas","canvas","xWindow","yWindow","canvasBox","getBoundingClientRect","left","top","setupInteraction","origin","state","staticBoard","dieUnderCursor","holdTimeout","holdDie","playerWithATurn","querySelector","releaseIt","holdIt","startHolding","setTimeout","holdDuration","showInteraction","event","layout","getAt","clientX","clientY","style","cursor","move","dx","abs","dy","clearTimeout","diceWithoutDieUnderCursor","getImageData","putImageData","stopInteraction","snapToCoords","newCoords","touchCoordinates","touch2mouseEvent","mouseEventName","touchEvent","touches","MouseEvent","addEventListener","disabledHoldingDice","disabledDraggingDice","TopDiceBoardHTMLElement","display","shadow","attachShadow","mode","document","createElement","appendChild","disabledRotation","getElementsByTagName","disabledRotatingDice","players","startTurn","forEach","throwIt","CIRCLE_DEGREES","NUMBER_OF_PIPS","DEFAULT_COLOR","DEFAULT_X","DEFAULT_Y","DEFAULT_ROTATION","DEFAULT_OPACITY","HELD_BY_ATTRIBUTE","PIPS_ATTRIBUTE","ROTATION_ATTRIBUTE","X_ATTRIBUTE","Y_ATTRIBUTE","BASE_DIE_SIZE","BASE_ROUNDED_CORNER_RADIUS","BASE_STROKE_WIDTH","MIN_STROKE_WIDTH","HALF","THIRD","PIP_SIZE","PIP_COLOR","deg2rad","deg","PI","isPipNumber","isInteger","randomPips","DIE_UNICODE_CHARACTERS","pipsToUnicode","p","renderHold","SEPERATOR","save","globalAlpha","beginPath","fillStyle","arc","fill","restore","renderDie","SCALE","HALF_INNER_SIZE","sqrt","INNER_SIZE","ROUNDED_CORNER_RADIUS","INNER_SIZE_ROUNDED","STROKE_WIDTH","startX","startY","strokeStyle","lineWidth","moveTo","lineTo","stroke","renderPip","_board","_heldBy","_pips","_rotation","_x","_y","TopDieHTMLElement","pips","NaN","heldBy","Event","toUnicode","newColor","toString","c","newX","newY","newR","normalizedRotation","equals","scale","SHALF","STHIRD","SPIP_SIZE","translate","setTransform","TopPlayerListHTMLElement","endTurn","twentyonepips","Object","freeze","VERSION","LICENSE","WEBSITE","HTMLElements"],"mappings":"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","file":"twenty-one-pips.min.js","sourcesContent":["/** \n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n\n/**\n * @module\n */\n\n/**\n * ConfigurationError\n *\n * @extends Error\n */\nconst ConfigurationError = class extends Error {\n\n    /**\n     * Create a new ConfigurationError with message.\n     *\n     * @param {String} message - The message associated with this\n     * ConfigurationError.\n     */\n    constructor(message) {\n        super(message);\n    }\n};\n\nexport {ConfigurationError};\n","/** \n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\nimport {ConfigurationError} from \"./error/ConfigurationError.js\";\n\n/**\n * @module\n */\n\nconst FULL_CIRCLE_IN_DEGREES = 360;\n\nconst randomizeCenter = (n) => {\n    return (0.5 <= Math.random() ? Math.floor : Math.ceil).call(0, n);\n};\n\n// Private fields\nconst _width = new WeakMap();\nconst _height = new WeakMap();\nconst _cols = new WeakMap();\nconst _rows = new WeakMap();\nconst _dice = new WeakMap();\nconst _dieSize = new WeakMap();\nconst _dispersion = new WeakMap();\nconst _rotate = new WeakMap();\n\n/**\n * @typedef {Object} GridLayoutConfiguration\n * @property {Number} config.width - The minimal width of this\n * GridLayout in pixels.;\n * @property {Number} config.height] - The minimal height of\n * this GridLayout in pixels..\n * @property {Number} config.dispersion - The distance from the center of the\n * layout a die can be layout.\n * @property {Number} config.dieSize - The size of a die.\n */\n\n/**\n * GridLayout handles laying out the dice on a DiceBoard.\n */\nconst GridLayout = class {\n\n    /**\n     * Create a new GridLayout.\n     *\n     * @param {GridLayoutConfiguration} config - The configuration of the GridLayout\n     */\n    constructor({\n        width,\n        height,\n        dispersion,\n        dieSize\n    } = {}) {\n        _dice.set(this, []);\n        _dieSize.set(this, 1);\n        _width.set(this, 0);\n        _height.set(this, 0);\n        _rotate.set(this, true);\n\n        this.dispersion = dispersion;\n        this.dieSize = dieSize;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * The width in pixels used by this GridLayout.\n     * @throws module:error/ConfigurationError.ConfigurationError Width >= 0\n     * @type {Number} \n     */\n    get width() {\n        return _width.get(this);\n    }\n\n    set width(w) {\n        if (0 > w) {\n            throw new ConfigurationError(`Width should be a number larger than 0, got '${w}' instead.`);\n        }\n        _width.set(this, w);\n        this._calculateGrid(this.width, this.height);\n    }\n\n    /**\n     * The height in pixels used by this GridLayout. \n     * @throws module:error/ConfigurationError.ConfigurationError Height >= 0\n     *\n     * @type {Number}\n     */\n    get height() {\n        return _height.get(this);\n    }\n\n    set height(h) {\n        if (0 > h) {\n            throw new ConfigurationError(`Height should be a number larger than 0, got '${h}' instead.`);\n        }\n        _height.set(this, h);\n        this._calculateGrid(this.width, this.height);\n    }\n\n    /**\n     * The maximum number of dice that can be layout on this GridLayout. This\n     * number is >= 0. Read only.\n     *\n     * @type {Number}\n     */\n    get maximumNumberOfDice() {\n        return this._cols * this._rows;\n    }\n\n    /**\n     * The dispersion level used by this GridLayout. The dispersion level\n     * indicates the distance from the center dice can be layout. Use 1 for a\n     * tight packed layout.\n     *\n     * @throws module:error/ConfigurationError.ConfigurationError Dispersion >= 0\n     * @type {Number}\n     */\n    get dispersion() {\n        return _dispersion.get(this);\n    }\n\n    set dispersion(d) {\n        if (0 > d) {\n            throw new ConfigurationError(`Dispersion should be a number larger than 0, got '${d}' instead.`);\n        }\n        return _dispersion.set(this, d);\n    }\n\n    /**\n     * The size of a die.\n     *\n     * @throws module:error/ConfigurationError.ConfigurationError DieSize >= 0\n     * @type {Number}\n     */\n    get dieSize() {\n        return _dieSize.get(this);\n    }\n\n    set dieSize(ds) {\n        if (0 >= ds) {\n            throw new ConfigurationError(`dieSize should be a number larger than 1, got '${ds}' instead.`);\n        }\n        _dieSize.set(this, ds);\n        this._calculateGrid(this.width, this.height);\n    }\n\n    get rotate() {\n        const r = _rotate.get(this);\n        return undefined === r ? true : r;\n    }\n\n    set rotate(r) {\n        _rotate.set(this, r);\n    }\n\n    /**\n     * The number of rows in this GridLayout.\n     *\n     * @return {Number} The number of rows, 0 < rows.\n     * @private\n     */\n    get _rows() {\n        return _rows.get(this);\n    }\n\n    /**\n     * The number of columns in this GridLayout.\n     *\n     * @return {Number} The number of columns, 0 < columns.\n     * @private\n     */\n    get _cols() {\n        return _cols.get(this);\n    }\n\n    /**\n     * The center cell in this GridLayout.\n     *\n     * @return {Object} The center (row, col).\n     * @private\n     */\n    get _center() {\n        const row = randomizeCenter(this._rows / 2) - 1;\n        const col = randomizeCenter(this._cols / 2) - 1;\n\n        return {row, col};\n    }\n\n    /**\n     * Layout dice on this GridLayout.\n     *\n     * @param {module:Die~Die[]} dice - The dice to layout on this Layout.\n     * @return {module:Die~Die[]} The same list of dice, but now layout.\n     *\n     * @throws {module:error/ConfigurationError~ConfigurationError} The number of\n     * dice should not exceed the maximum number of dice this Layout can\n     * layout.\n     */\n    layout(dice) {\n        if (dice.length > this.maximumNumberOfDice) {\n            throw new ConfigurationError(`The number of dice that can be layout is ${this.maximumNumberOfDice}, got ${dice.lenght} dice instead.`);\n        }\n\n        const alreadyLayoutDice = [];\n        const diceToLayout = [];\n\n        for (const die of dice) {\n            if (die.hasCoordinates() && die.isHeld()) {\n                // Dice that are being held and have been layout before should\n                // keep their current coordinates and rotation. In other words,\n                // these dice are skipped.\n                alreadyLayoutDice.push(die);\n            } else {\n                diceToLayout.push(die);\n            }\n        }\n\n        const max = Math.min(dice.length * this.dispersion, this.maximumNumberOfDice);\n        const availableCells = this._computeAvailableCells(max, alreadyLayoutDice);\n\n        for (const die of diceToLayout) {\n            const randomIndex = Math.floor(Math.random() * availableCells.length);\n            const randomCell = availableCells[randomIndex];\n            availableCells.splice(randomIndex, 1);\n\n            die.coordinates = this._numberToCoordinates(randomCell);\n            die.rotation = this.rotate ? Math.round(Math.random() * FULL_CIRCLE_IN_DEGREES) : null;\n            alreadyLayoutDice.push(die);\n        }\n\n        _dice.set(this, alreadyLayoutDice);\n\n        return alreadyLayoutDice;\n    }\n\n    /**\n     * Compute a list with available cells to place dice on.\n     *\n     * @param {Number} max - The number empty cells to compute.\n     * @param {Die[]} alreadyLayoutDice - A list with dice that have already been layout.\n     * \n     * @return {NUmber[]} The list of available cells represented by their number.\n     * @private\n     */\n    _computeAvailableCells(max, alreadyLayoutDice) {\n        const available = new Set();\n        let level = 0;\n        const maxLevel = Math.min(this._rows, this._cols);\n\n        while (available.size < max && level < maxLevel) {\n            for (const cell of this._cellsOnLevel(level)) {\n                if (undefined !== cell && this._cellIsEmpty(cell, alreadyLayoutDice)) {\n                    available.add(cell);\n                }\n            }\n\n            level++;\n        }\n\n        return Array.from(available);\n    }\n\n    /**\n     * Calculate all cells on level from the center of the layout.\n     *\n     * @param {Number} level - The level from the center of the layout. 0\n     * indicates the center.\n     *\n     * @return {Set<Number>} the cells on the level in this layout represented by\n     * their number.\n     * @private\n     */\n    _cellsOnLevel(level) {\n        const cells = new Set();\n        const center = this._center;\n\n        if (0 === level) {\n            cells.add(this._cellToNumber(center));\n        } else {\n            for (let row = center.row - level; row <= center.row + level; row++) {\n                cells.add(this._cellToNumber({row, col: center.col - level}));\n                cells.add(this._cellToNumber({row, col: center.col + level}));\n            }\n\n            for (let col = center.col - level + 1; col < center.col + level; col++) {\n                cells.add(this._cellToNumber({row: center.row - level, col}));\n                cells.add(this._cellToNumber({row: center.row + level, col}));\n            }\n        }\n\n        return cells;\n    }\n\n    /**\n     * Does cell contain a cell from alreadyLayoutDice?\n     *\n     * @param {Number} cell - A cell in layout represented by a number.\n     * @param {Die[]} alreadyLayoutDice - A list of dice that have already been layout.\n     *\n     * @return {Boolean} True if cell does not contain a die.\n     * @private\n     */\n    _cellIsEmpty(cell, alreadyLayoutDice) {\n        return undefined === alreadyLayoutDice.find(die => cell === this._coordinatesToNumber(die.coordinates));\n    }\n\n    /**\n     * Convert a number to a cell (row, col)\n     *\n     * @param {Number} n - The number representing a cell\n     * @returns {Object} Return the cell ({row, col}) corresponding n.\n     * @private\n     */\n    _numberToCell(n) {\n        return {row: Math.trunc(n / this._cols), col: n % this._cols};\n    }\n\n    /**\n     * Convert a cell to a number\n     *\n     * @param {Object} cell - The cell to convert to its number.\n     * @return {Number|undefined} The number corresponding to the cell.\n     * Returns undefined when the cell is not on the layout\n     * @private\n     */\n    _cellToNumber({row, col}) {\n        if (0 <= row && row < this._rows && 0 <= col && col < this._cols) {\n            return row * this._cols + col;\n        }\n        return undefined;\n    }\n\n    /**\n     * Convert a cell represented by its number to their coordinates.\n     *\n     * @param {Number} n - The number representing a cell\n     *\n     * @return {Object} The coordinates corresponding to the cell represented by\n     * this number.\n     * @private\n     */\n    _numberToCoordinates(n) {\n        return this._cellToCoords(this._numberToCell(n));\n    }\n\n    /**\n     * Convert a pair of coordinates to a number.\n     *\n     * @param {Object} coords - The coordinates to convert\n     *\n     * @return {Number|undefined} The coordinates converted to a number. If\n     * the coordinates are not on this layout, the number is undefined.\n     * @private\n     */\n    _coordinatesToNumber(coords) {\n        const n = this._cellToNumber(this._coordsToCell(coords));\n        if (0 <= n && n < this.maximumNumberOfDice) {\n            return n;\n        }\n        return undefined;\n    }\n\n    /**\n     * Snap (x,y) to the closest cell in this Layout.\n     *\n     * @param {Object} diecoordinate - The coordinate to find the closest cell\n     * for.\n     * @param {Die} [diecoordinat.die = null] - The die to snap to.\n     * @param {Number} diecoordinate.x - The x-coordinate.\n     * @param {Number} diecoordinate.y - The y-coordinate.\n     *\n     * @return {Object|null} The coordinate of the cell closest to (x, y).\n     * Null when no suitable cell is near (x, y)\n     */\n    snapTo({die = null, x, y}) {\n        const cornerCell = {\n            row: Math.trunc(y / this.dieSize),\n            col: Math.trunc(x / this.dieSize)\n        };\n\n        const corner = this._cellToCoords(cornerCell);\n        const widthIn = corner.x + this.dieSize - x;\n        const widthOut = this.dieSize - widthIn;\n        const heightIn = corner.y + this.dieSize - y;\n        const heightOut = this.dieSize - heightIn;\n\n        const quadrants = [{\n            q: this._cellToNumber(cornerCell),\n            coverage: widthIn * heightIn\n        }, {\n            q: this._cellToNumber({\n                row: cornerCell.row,\n                col: cornerCell.col + 1\n            }),\n            coverage: widthOut * heightIn\n        }, {\n            q: this._cellToNumber({\n                row: cornerCell.row + 1,\n                col: cornerCell.col\n            }),\n            coverage: widthIn * heightOut\n        }, {\n            q: this._cellToNumber({\n                row: cornerCell.row + 1,\n                col: cornerCell.col + 1\n            }),\n            coverage: widthOut * heightOut\n        }];\n\n        const snapTo = quadrants\n            // cell should be on the layout\n            .filter((quadrant) => undefined !== quadrant.q)\n            // cell should be not already taken except by itself\n            .filter((quadrant) => (\n                null !== die && this._coordinatesToNumber(die.coordinates) === quadrant.q)\n                || this._cellIsEmpty(quadrant.q, _dice.get(this)))\n            // cell should be covered by the die the most\n            .reduce(\n                (maxQ, quadrant) => quadrant.coverage > maxQ.coverage ? quadrant : maxQ,\n                {q: undefined, coverage: -1}\n            );\n\n        return undefined !== snapTo.q ? this._numberToCoordinates(snapTo.q) : null;\n    }\n\n    /**\n     * Get the die at point (x, y);\n     *\n     * @param {Point} point - The point in (x, y) coordinates\n     * @return {Die|null} The die under coordinates (x, y) or null if no die\n     * is at the point.\n     */\n    getAt(point = {x: 0, y: 0}) {\n        for (const die of _dice.get(this)) {\n            const {x, y} = die.coordinates;\n\n            const xFit = x <= point.x && point.x <= x + this.dieSize;\n            const yFit = y <= point.y && point.y <= y + this.dieSize;\n\n            if (xFit && yFit) {\n                return die;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Calculate the grid size given width and height.\n     *\n     * @param {Number} width - The minimal width\n     * @param {Number} height - The minimal height\n     *\n     * @private\n     */\n    _calculateGrid(width, height) {\n        _cols.set(this, Math.floor(width / this.dieSize));\n        _rows.set(this, Math.floor(height / this.dieSize));\n    }\n\n    /**\n     * Convert a (row, col) cell to (x, y) coordinates.\n     *\n     * @param {Object} cell - The cell to convert to coordinates\n     * @return {Object} The corresponding coordinates.\n     * @private\n     */\n    _cellToCoords({row, col}) {\n        return {x: col * this.dieSize, y: row * this.dieSize};\n    }\n\n    /**\n     * Convert (x, y) coordinates to a (row, col) cell.\n     *\n     * @param {Object} coordinates - The coordinates to convert to a cell.\n     * @return {Object} The corresponding cell\n     * @private\n     */\n    _coordsToCell({x, y}) {\n        return {\n            row: Math.trunc(y / this.dieSize),\n            col: Math.trunc(x / this.dieSize)\n        };\n    }\n};\n\nexport {GridLayout};\n","/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n\n/**\n * @module mixin/ReadOnlyAttributes\n */\n\n/*\n * Convert an HTML attribute to an instance's property. \n *\n * @param {String} name - The attribute's name\n * @return {String} The corresponding property's name. For example, \"my-attr\"\n * will be converted to \"myAttr\", and \"disabled\" to \"disabled\".\n */\nconst attribute2property = (name) => {\n    const [first, ...rest] = name.split(\"-\");\n    return first + rest.map(word => word.slice(0, 1).toUpperCase() + word.slice(1)).join();\n};\n\n/**\n * Mixin {@link module:mixin/ReadOnlyAttributes~ReadOnlyAttributes} to a class.\n *\n * @param {*} Sup - The class to mix into.\n * @return {module:mixin/ReadOnlyAttributes~ReadOnlyAttributes} The mixed-in class\n */\nconst ReadOnlyAttributes = (Sup) =>\n    /**\n     * Mixin to make all attributes on a custom HTMLElement read-only in the sense\n     * that when the attribute gets a new value that differs from the value of the\n     * corresponding property, it is reset to that property's value. The\n     * assumption is that attribute \"my-attribute\" corresponds with property \"this.myAttribute\".\n     *\n     * @param {Class} Sup - The class to mixin this ReadOnlyAttributes.\n     * @return {ReadOnlyAttributes} The mixed in class.\n     *\n     * @mixin\n     * @alias module:mixin/ReadOnlyAttributes~ReadOnlyAttributes\n     */\n    class extends Sup {\n\n        /**\n         * Callback that is executed when an observed attribute's value is\n         * changed. If the HTMLElement is connected to the DOM, the attribute\n         * value can only be set to the corresponding HTMLElement's property.\n         * In effect, this makes this HTMLElement's attributes read-only.\n         *\n         * For example, if an HTMLElement has an attribute \"x\" and\n         * corresponding property \"x\", then changing the value \"x\" to \"5\"\n         * will only work when `this.x === 5`.\n         *\n         * @param {String} name - The attribute's name.\n         * @param {String} oldValue - The attribute's old value.\n         * @param {String} newValue - The attribute's new value.\n         */\n        attributeChangedCallback(name, oldValue, newValue) {\n            // All attributes are made read-only to prevent cheating by changing\n            // the attribute values. Of course, this is by no\n            // guarantee that users will not cheat in a different way.\n            const property = attribute2property(name);\n            if (this.connected && newValue !== `${this[property]}`) {\n                this.setAttribute(name, this[property]);\n            }\n        }\n    };\n\nexport {\n    ReadOnlyAttributes\n};\n","/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n/**\n * @module\n */\nimport {ConfigurationError} from \"./error/ConfigurationError.js\";\nimport {ReadOnlyAttributes} from \"./mixin/ReadOnlyAttributes.js\";\n\n// The names of the (observed) attributes of the TopPlayerHTMLElement.\nconst COLOR_ATTRIBUTE = \"color\";\nconst NAME_ATTRIBUTE = \"name\";\nconst SCORE_ATTRIBUTE = \"score\";\nconst HAS_TURN_ATTRIBUTE = \"has-turn\";\n\n// The private properties of the TopPlayerHTMLElement \nconst _color = new WeakMap();\nconst _name = new WeakMap();\nconst _score = new WeakMap();\nconst _hasTurn = new WeakMap();\n\n/**\n * A Player in a dice game.\n *\n * A player's name should be unique in the game. Two different\n * TopPlayerHTMLElement elements with the same name attribute are treated as\n * the same player.\n *\n * In general it is recommended that no two players do have the same color,\n * although it is not unconceivable that certain dice games have players work\n * in teams where it would make sense for two or more different players to\n * have the same color.\n *\n * The name and color attributes are required. The score and has-turn\n * attributes are not.\n *\n * @extends HTMLElement\n * @mixes module:mixin/ReadOnlyAttributes~ReadOnlyAttributes\n */\nconst TopPlayerHTMLElement = class extends ReadOnlyAttributes(HTMLElement) {\n\n    /**\n     * Create a new TopPlayerHTMLElement, optionally based on an intitial\n     * configuration via an object parameter or declared attributes in HTML.\n     *\n     * @param {Object} [config] - An initial configuration for the\n     * player to create.\n     * @param {String} config.color - This player's color used in the game.\n     * @param {String} config.name - This player's name.\n     * @param {Number} [config.score] - This player's score.\n     * @param {Boolean} [config.hasTurn] - This player has a turn.\n     */\n    constructor({color, name, score, hasTurn}) {\n        super();\n\n        if (color && \"\" !== color) {\n            _color.set(this, color);\n            this.setAttribute(COLOR_ATTRIBUTE, this.color);\n        } else if (this.hasAttribute(COLOR_ATTRIBUTE) && \"\" !== this.getAttribute(COLOR_ATTRIBUTE)) {\n            _color.set(this, this.getAttribute(COLOR_ATTRIBUTE));\n        } else {\n            throw new ConfigurationError(\"A Player needs a color, which is a String.\");\n        }\n\n        if (name && \"\" !== name) {\n            _name.set(this, name);\n            this.setAttribute(NAME_ATTRIBUTE, this.name);\n        } else if (this.hasAttribute(NAME_ATTRIBUTE) && \"\" !== this.getAttribute(NAME_ATTRIBUTE)) {\n            _name.set(this, this.getAttribute(NAME_ATTRIBUTE));\n        } else {\n            throw new ConfigurationError(\"A Player needs a name, which is a String.\");\n        }\n\n        if (score) {\n            _score.set(this, score);\n            this.setAttribute(SCORE_ATTRIBUTE, this.score);\n        } else if (this.hasAttribute(SCORE_ATTRIBUTE) && Number.isNaN(parseInt(this.getAttribute(SCORE_ATTRIBUTE), 10))) {\n            _score.set(this, parseInt(this.getAttribute(SCORE_ATTRIBUTE), 10));\n        } else {\n            // Okay. A player does not need to have a score.\n            _score.set(this, null);\n        }\n\n        if (true === hasTurn) {\n            _hasTurn.set(this, hasTurn);\n            this.setAttribute(HAS_TURN_ATTRIBUTE, hasTurn);\n        } else if (this.hasAttribute(HAS_TURN_ATTRIBUTE)) {\n            _hasTurn.set(this, true);\n        } else {\n            // Okay, A player does not always have a turn.\n            _hasTurn.set(this, null);\n        }\n    }\n\n    static get observedAttributes() {\n        return [\n            COLOR_ATTRIBUTE,\n            NAME_ATTRIBUTE,\n            SCORE_ATTRIBUTE,\n            HAS_TURN_ATTRIBUTE\n        ];\n    }\n\n    connectedCallback() {\n    }\n\n    disconnectedCallback() {\n    }\n\n    /**\n     * This player's color.\n     *\n     * @type {String}\n     */\n    get color() {\n        return _color.get(this);\n    }\n\n    /**\n     * This player's name.\n     *\n     * @type {String}\n     */\n    get name() {\n        return _name.get(this);\n    }\n\n    /**\n     * This player's score.\n     *\n     * @type {Number}\n     */\n    get score() {\n        return null === _score.get(this) ? 0 : _score.get(this);\n    }\n    set score(newScore) {\n        _score.set(this, newScore);\n        if (null === newScore) {\n            this.removeAttribute(SCORE_ATTRIBUTE);\n        } else {\n            this.setAttribute(SCORE_ATTRIBUTE, newScore);\n        }\n    }\n\n    /**\n     * Start a turn for this player.\n     */\n    startTurn() {\n        if (this.isConnected) {\n            this.parentNode.dispatchEvent(new CustomEvent(\"top:start-turn\", {\n                detail: {\n                    player: this\n                }\n            }));\n        }\n        _hasTurn.set(this, true);\n        this.setAttribute(HAS_TURN_ATTRIBUTE, true);\n    }\n\n    /**\n     * End a turn for this player.\n     */\n    endTurn() {\n        _hasTurn.set(this, null);\n        this.removeAttribute(HAS_TURN_ATTRIBUTE);\n    }\n\n    /**\n     * Does this player have a turn?\n     *\n     * @type {Boolean}\n     */\n    get hasTurn() {\n        return true === _hasTurn.get(this);\n    }\n\n    /**\n     * A String representation of this player, his or hers name.\n     *\n     * @return {String} The player's name represents the player as a string.\n     */\n    toString() {\n        return `${this.name}`;\n    }\n\n    /**\n     * Is this player equal another player?\n     * \n     * @param {module:TopPlayerHTMLElement~TopPlayerHTMLElement} other - The other player to compare this player with.\n     * @return {Boolean} True when either the object references are the same\n     * or when both name and color are the same.\n     */\n    equals(other) {\n        const name = \"string\" === typeof other ? other : other.name;\n        return other === this || name === this.name;\n    }\n};\n\nwindow.customElements.define(\"top-player\", TopPlayerHTMLElement);\n\n/**\n * The default system player. Dice are thrown by a player. For situations\n * where you want to render a bunch of dice without needing the concept of Players\n * this DEFAULT_SYSTEM_PLAYER can be a substitute. Of course, if you'd like to\n * change the name and/or the color, create and use your own \"system player\".\n * @const\n */\nconst DEFAULT_SYSTEM_PLAYER = new TopPlayerHTMLElement({color: \"red\", name: \"*\"});\n\nexport {\n    TopPlayerHTMLElement,\n    DEFAULT_SYSTEM_PLAYER\n};\n","/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n//import {ConfigurationError} from \"./error/ConfigurationError.js\";\nimport {GridLayout} from \"./GridLayout.js\";\nimport {DEFAULT_SYSTEM_PLAYER} from \"./TopPlayerHTMLElement.js\";\n\n/**\n * @module\n */\n\nconst DEFAULT_DIE_SIZE = 100; // px\nconst DEFAULT_HOLD_DURATION = 375; // ms\nconst DEFAULT_DRAGGING_DICE_DISABLED = false;\nconst DEFAULT_HOLDING_DICE_DISABLED = false;\nconst DEFAULT_ROTATING_DICE_DISABLED = false;\n\nconst ROWS = 10;\nconst COLS = 10;\n\nconst DEFAULT_WIDTH = COLS * DEFAULT_DIE_SIZE; // px\nconst DEFAULT_HEIGHT = ROWS * DEFAULT_DIE_SIZE; // px\nconst DEFAULT_DISPERSION = Math.floor(ROWS / 2);\n\nconst MIN_DELTA = 3; //px\n\nconst WIDTH_ATTRIBUTE = \"width\";\nconst HEIGHT_ATTRIBUTE = \"height\";\nconst DISPERSION_ATTRIBUTE = \"dispersion\";\nconst DIE_SIZE_ATTRIBUTE = \"die-size\";\nconst DRAGGING_DICE_DISABLED_ATTRIBUTE = \"dragging-dice-disabled\";\nconst HOLDING_DICE_DISABLED_ATTRIBUTE = \"holding-dice-disabled\";\nconst ROTATING_DICE_DISABLED_ATTRIBUTE = \"rotating-dice-disabled\";\nconst HOLD_DURATION_ATTRIBUTE = \"hold-duration\";\n\n\nconst parseNumber = (numberString, defaultNumber = 0) => {\n    const number = parseInt(numberString, 10);\n    return Number.isNaN(number) ? defaultNumber : number;\n};\n\nconst validatePositiveNumber = (number, maxNumber = Infinity) => {\n    return 0 <= number && number < maxNumber;\n};\n\nconst getPositiveNumber = (numberString, defaultValue) => {\n    const value = parseNumber(numberString, defaultValue);\n    return validatePositiveNumber(value) ? value : defaultValue;\n};\n\nconst getPositiveNumberAttribute = (element, name, defaultValue) => {\n    if (element.hasAttribute(name)) {\n        const valueString = element.getAttribute(name);\n        return getPositiveNumber(valueString, defaultValue);\n    }\n    return defaultValue;\n};\n\nconst getBoolean = (booleanString, trueValue, defaultValue) => {\n    if (trueValue === booleanString || \"true\" === booleanString) {\n        return true;\n    } else if (\"false\" === booleanString) {\n        return false;\n    } else {\n        return defaultValue;\n    }\n};\n\nconst getBooleanAttribute = (element, name, defaultValue) => {\n    if (element.hasAttribute(name)) {\n        const valueString = element.getAttribute(name);\n        return getBoolean(valueString, [valueString, \"true\"], [\"false\"], defaultValue);\n    }\n\n    return defaultValue;\n};\n\n// Private properties\nconst _canvas = new WeakMap();\nconst _layout = new WeakMap();\nconst _currentPlayer = new WeakMap();\nconst _numberOfReadyDice = new WeakMap();\n\nconst context = (board) => _canvas.get(board).getContext(\"2d\");\n\nconst getReadyDice = (board) => {\n    if (undefined === _numberOfReadyDice.get(board)) {\n        _numberOfReadyDice.set(board, 0);\n    }\n\n    return _numberOfReadyDice.get(board);\n};\n\nconst updateReadyDice = (board, update) => {\n    _numberOfReadyDice.set(board, getReadyDice(board) + update);\n};\n\nconst isReady = (board) => getReadyDice(board) === board.dice.length;\n\nconst updateBoard = (board, dice = board.dice) => {\n    if (isReady(board)) {\n        context(board).clearRect(0, 0, board.width, board.height);\n\n        for (const die of dice) {\n            die.render(context(board), board.dieSize);\n        }\n    }\n};\n\n\n// Interaction states\nconst NONE = Symbol(\"no_interaction\");\nconst HOLD = Symbol(\"hold\");\nconst MOVE = Symbol(\"move\");\nconst INDETERMINED = Symbol(\"indetermined\");\nconst DRAGGING = Symbol(\"dragging\");\n\n// Methods to handle interaction\nconst convertWindowCoordinatesToCanvas = (canvas, xWindow, yWindow) => {\n    const canvasBox = canvas.getBoundingClientRect();\n\n    const x = xWindow - canvasBox.left * (canvas.width / canvasBox.width);\n    const y = yWindow - canvasBox.top * (canvas.height / canvasBox.height);\n\n    return {x, y};\n};\n\nconst setupInteraction = (board) => {\n    const canvas = _canvas.get(board);\n\n    // Setup interaction\n    let origin = {};\n    let state = NONE;\n    let staticBoard = null;\n    let dieUnderCursor = null;\n    let holdTimeout = null;\n\n    const holdDie = () => {\n        if (HOLD === state || INDETERMINED === state) {\n            // toggle hold / release\n            const playerWithATurn = board.querySelector(\"top-player-list top-player[has-turn]\");\n            if (dieUnderCursor.isHeld()) {\n                dieUnderCursor.releaseIt(playerWithATurn);\n            } else {\n                dieUnderCursor.holdIt(playerWithATurn);\n            }\n            state = NONE;\n\n            updateBoard(board);\n        }\n\n        holdTimeout = null;\n    };\n\n    const startHolding = () => {\n        holdTimeout = window.setTimeout(holdDie, board.holdDuration);\n    };\n\n    const stopHolding = () => {\n        window.clearTimeout(holdTimeout);\n        holdTimeout = null;\n    };\n\n    const startInteraction = (event) => {\n        if (NONE === state) {\n\n            origin = {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            dieUnderCursor = board.layout.getAt(convertWindowCoordinatesToCanvas(canvas, event.clientX, event.clientY));\n\n            if (null !== dieUnderCursor) {\n                // Only interaction with the board via a die\n                if (!board.disabledHoldingDice && !board.disabledDraggingDice) {\n                    state = INDETERMINED;\n                    startHolding();\n                } else if (!board.disabledHoldingDice) {\n                    state = HOLD;\n                    startHolding();\n                } else if (!board.disabledDraggingDice) {\n                    state = MOVE;\n                }\n            }\n\n        }\n    };\n\n    const showInteraction = (event) => {\n        const dieUnderCursor = board.layout.getAt(convertWindowCoordinatesToCanvas(canvas, event.clientX, event.clientY));\n        if (DRAGGING === state) {\n            canvas.style.cursor = \"grabbing\";\n        } else if (null !== dieUnderCursor) {\n            canvas.style.cursor = \"grab\";\n        } else {\n            canvas.style.cursor = \"default\";\n        }\n    };\n\n    const move = (event) => {\n        if (MOVE === state || INDETERMINED === state) {\n            // determine if a die is under the cursor\n            // Ignore small movements\n            const dx = Math.abs(origin.x - event.clientX);\n            const dy = Math.abs(origin.y - event.clientY);\n\n            if (MIN_DELTA < dx || MIN_DELTA < dy) {\n                state = DRAGGING;\n                stopHolding();\n\n                const diceWithoutDieUnderCursor = board.dice.filter(die => die !== dieUnderCursor);\n                updateBoard(board, diceWithoutDieUnderCursor);\n                staticBoard = context(board).getImageData(0, 0, canvas.width, canvas.height);\n            }\n        } else if (DRAGGING === state) {\n            const dx = origin.x - event.clientX;\n            const dy = origin.y - event.clientY;\n\n            const {x, y} = dieUnderCursor.coordinates;\n\n            context(board).putImageData(staticBoard, 0, 0);\n            dieUnderCursor.render(context(board), board.dieSize, {x: x - dx, y: y - dy});\n        }\n    };\n\n    const stopInteraction = (event) => {\n        if (null !== dieUnderCursor && DRAGGING === state) {\n            const dx = origin.x - event.clientX;\n            const dy = origin.y - event.clientY;\n\n            const {x, y} = dieUnderCursor.coordinates;\n\n            const snapToCoords = board.layout.snapTo({\n                die: dieUnderCursor,\n                x: x - dx,\n                y: y - dy,\n            });\n\n            const newCoords = null != snapToCoords ? snapToCoords : {x, y};\n\n            dieUnderCursor.coordinates = newCoords;\n        }\n\n        // Clear state\n        dieUnderCursor = null;\n        state = NONE;\n\n        // Refresh board; Render dice\n        updateBoard(board);\n    };\n\n\n    // Register the actual event listeners defined above. Map touch events to\n    // equivalent mouse events. Because the \"touchend\" event does not have a\n    // clientX and clientY, record and use the last ones from the \"touchmove\"\n    // (or \"touchstart\") events.\n\n    let touchCoordinates = {clientX: 0, clientY: 0};\n    const touch2mouseEvent = (mouseEventName) => {\n        return (touchEvent) => {\n            if (touchEvent && 0 < touchEvent.touches.length) {\n                const {clientX, clientY} = touchEvent.touches[0];\n                touchCoordinates = {clientX, clientY};\n            }\n            canvas.dispatchEvent(new MouseEvent(mouseEventName, touchCoordinates));\n        };\n    };\n\n    canvas.addEventListener(\"touchstart\", touch2mouseEvent(\"mousedown\"));\n    canvas.addEventListener(\"mousedown\", startInteraction);\n\n    if (!board.disabledDraggingDice) {\n        canvas.addEventListener(\"touchmove\", touch2mouseEvent(\"mousemove\"));\n        canvas.addEventListener(\"mousemove\", move);\n    }\n\n    if (!board.disabledDraggingDice || !board.disabledHoldingDice) {\n        canvas.addEventListener(\"mousemove\", showInteraction);\n    }\n\n    canvas.addEventListener(\"touchend\", touch2mouseEvent(\"mouseup\"));\n    canvas.addEventListener(\"mouseup\", stopInteraction);\n    canvas.addEventListener(\"mouseout\", stopInteraction);\n};\n\n/**\n * TopDiceBoardHTMLElement is a custom HTML element to render and control a\n * dice board. \n *\n * @extends HTMLElement\n */\nconst TopDiceBoardHTMLElement = class extends HTMLElement {\n\n    /**\n     * Create a new TopDiceBoardHTMLElement.\n     */\n    constructor() {\n        super();\n        this.style.display = \"inline-block\";\n        const shadow = this.attachShadow({mode: \"closed\"});\n        const canvas = document.createElement(\"canvas\");\n        shadow.appendChild(canvas);\n\n        _canvas.set(this, canvas);\n        _currentPlayer.set(this, DEFAULT_SYSTEM_PLAYER);\n        _layout.set(this, new GridLayout({\n            width: this.width,\n            height: this.height,\n            dieSize: this.dieSize,\n            dispersion: this.dispersion\n        }));\n        setupInteraction(this);\n    }\n\n    static get observedAttributes() {\n        return [\n            WIDTH_ATTRIBUTE,\n            HEIGHT_ATTRIBUTE,\n            DISPERSION_ATTRIBUTE,\n            DIE_SIZE_ATTRIBUTE,\n            DRAGGING_DICE_DISABLED_ATTRIBUTE,\n            ROTATING_DICE_DISABLED_ATTRIBUTE,\n            HOLDING_DICE_DISABLED_ATTRIBUTE,\n            HOLD_DURATION_ATTRIBUTE\n        ];\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        const canvas = _canvas.get(this);\n        switch (name) {\n        case WIDTH_ATTRIBUTE: {\n            const width = getPositiveNumber(newValue, parseNumber(oldValue) || DEFAULT_WIDTH);\n            this.layout.width = width;\n            canvas.setAttribute(WIDTH_ATTRIBUTE, width);\n            break;\n        }\n        case HEIGHT_ATTRIBUTE: {\n            const height = getPositiveNumber(newValue, parseNumber(oldValue) || DEFAULT_HEIGHT);\n            this.layout.height = height;\n            canvas.setAttribute(HEIGHT_ATTRIBUTE, height);\n            break;\n        }\n        case DISPERSION_ATTRIBUTE: {\n            const dispersion = getPositiveNumber(newValue, parseNumber(oldValue) || DEFAULT_DISPERSION);\n            this.layout.dispersion = dispersion;\n            break;\n        }\n        case DIE_SIZE_ATTRIBUTE: {\n            const dieSize = getPositiveNumber(newValue, parseNumber(oldValue) || DEFAULT_DIE_SIZE);\n            this.layout.dieSize = dieSize;\n            break;\n        }\n        case ROTATING_DICE_DISABLED_ATTRIBUTE: {\n            const disabledRotation = getBoolean(newValue, ROTATING_DICE_DISABLED_ATTRIBUTE, getBoolean(oldValue, ROTATING_DICE_DISABLED_ATTRIBUTE, DEFAULT_ROTATING_DICE_DISABLED));\n            this.layout.rotate = !disabledRotation;\n            break;\n        }\n        default: {\n            // The value is determined when using the getter\n        }\n        }\n\n        updateBoard(this);\n    }\n\n    connectedCallback() {\n        this.addEventListener(\"top-die:added\", () => {\n            updateReadyDice(this, 1);\n            if (isReady(this)) {\n                updateBoard(this, this.layout.layout(this.dice));\n            }\n        });\n\n        this.addEventListener(\"top-die:removed\", () => {\n            updateBoard(this, this.layout.layout(this.dice));\n            updateReadyDice(this, -1);\n        });\n\n        // All dice boards do have a player list. If there isn't one yet,\n        // create one.\n        if (null === this.querySelector(\"top-player-list\")) {\n            this.appendChild(document.createElement(\"top-player-list\"));\n        }\n    }\n\n    disconnectedCallback() {\n    }\n\n    adoptedCallback() {\n    }\n\n    /**\n     * The GridLayout used by this DiceBoard to layout the dice.\n     *\n     * @type {module:GridLayout~GridLayout}\n     */\n    get layout() {\n        return _layout.get(this);\n    }\n\n    /**\n     * The dice on this board. Note, to actually throw the dice use\n     * {@link throwDice}. \n     *\n     * @type {module:TopDieHTMLElement~TopDieHTMLElement[]}\n     */\n    get dice() {\n        return [...this.getElementsByTagName(\"top-die\")];\n    }\n\n    /**\n     * The maximum number of dice that can be put on this board.\n     *\n     * @return {Number} The maximum number of dice, 0 < maximum.\n     */\n    get maximumNumberOfDice() {\n        return this.layout.maximumNumberOfDice;\n    }\n\n    /**\n     * The width of this board.\n     *\n     * @type {Number}\n     */\n    get width() {\n        return getPositiveNumberAttribute(this, WIDTH_ATTRIBUTE, DEFAULT_WIDTH);\n    }\n\n    /**\n     * The height of this board.\n     * @type {Number}\n     */\n    get height() {\n        return getPositiveNumberAttribute(this, HEIGHT_ATTRIBUTE, DEFAULT_HEIGHT);\n    }\n\n    /**\n     * The dispersion level of this board.\n     * @type {Number}\n     */\n    get dispersion() {\n        return getPositiveNumberAttribute(this, DISPERSION_ATTRIBUTE, DEFAULT_DISPERSION);\n    }\n\n    /**\n     * The size of dice on this board.\n     *\n     * @type {Number}\n     */\n    get dieSize() {\n        return getPositiveNumberAttribute(this, DIE_SIZE_ATTRIBUTE, DEFAULT_DIE_SIZE);\n    }\n\n    /**\n     * Can dice on this board be dragged?\n     * @type {Boolean}\n     */\n    get disabledDraggingDice() {\n        return getBooleanAttribute(this, DRAGGING_DICE_DISABLED_ATTRIBUTE, DEFAULT_DRAGGING_DICE_DISABLED);\n    }\n\n    /**\n     * Can dice on this board be held by a Player?\n     * @type {Boolean}\n     */\n    get disabledHoldingDice() {\n        return getBooleanAttribute(this, HOLDING_DICE_DISABLED_ATTRIBUTE, DEFAULT_HOLDING_DICE_DISABLED);\n    }\n\n    /**\n     * Is rotating dice on this board disabled?\n     * @type {Boolean}\n     */\n    get disabledRotatingDice() {\n        return getBooleanAttribute(this, ROTATING_DICE_DISABLED_ATTRIBUTE, DEFAULT_ROTATING_DICE_DISABLED);\n    }\n\n    /**\n     * The duration in ms to press the mouse / touch a die before it bekomes\n     * held by the Player. It has only an effect when this.holdableDice ===\n     * true.\n     *\n     * @type {Number}\n     */\n    get holdDuration() {\n        return getPositiveNumberAttribute(this, HOLD_DURATION_ATTRIBUTE, DEFAULT_HOLD_DURATION);\n    }\n\n    /**\n     * The players playing on this board.\n     *\n     * @type {module:TopPlayerHTMLElement~TopPlayerHTMLElement[]}\n     */\n    get players() {\n        return this.querySelector(\"top-player-list\").players;\n    }\n\n    /**\n     * As player, throw the dice on this board.\n     *\n     * @param {module:TopPlayerHTMLElement~TopPlayerHTMLElement} [player = DEFAULT_SYSTEM_PLAYER] - The\n     * player that is throwing the dice on this board.\n     *\n     * @return {module:TopDieHTMLElement~TopDieHTMLElement[]} The thrown dice on this board. This list of dice is the same as this TopDiceBoardHTMLElement's {@see dice} property\n     */\n    throwDice(player = DEFAULT_SYSTEM_PLAYER) {\n        if (player && !player.hasTurn) {\n            player.startTurn();\n        }\n        this.dice.forEach(die => die.throwIt());\n        updateBoard(this, this.layout.layout(this.dice));\n        return this.dice;\n    }\n};\n\nwindow.customElements.define(\"top-dice-board\", TopDiceBoardHTMLElement);\n\nexport {\n    TopDiceBoardHTMLElement,\n    DEFAULT_DIE_SIZE,\n    DEFAULT_HOLD_DURATION,\n    DEFAULT_WIDTH,\n    DEFAULT_HEIGHT,\n    DEFAULT_DISPERSION,\n    DEFAULT_ROTATING_DICE_DISABLED\n};\n","/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n\n//import {ConfigurationError} from \"./error/ConfigurationError.js\";\nimport {ReadOnlyAttributes} from \"./mixin/ReadOnlyAttributes.js\";\n\n/**\n * @module\n */\nconst CIRCLE_DEGREES = 360; // degrees\nconst NUMBER_OF_PIPS = 6; // Default / regular six sided die has 6 pips maximum.\nconst DEFAULT_COLOR = \"Ivory\";\nconst DEFAULT_X = 0; // px\nconst DEFAULT_Y = 0; // px\nconst DEFAULT_ROTATION = 0; // degrees\nconst DEFAULT_OPACITY = 0.5;\n\nconst COLOR_ATTRIBUTE = \"color\";\nconst HELD_BY_ATTRIBUTE = \"held-by\";\nconst PIPS_ATTRIBUTE = \"pips\";\nconst ROTATION_ATTRIBUTE = \"rotation\";\nconst X_ATTRIBUTE = \"x\";\nconst Y_ATTRIBUTE = \"y\";\n\nconst BASE_DIE_SIZE = 100; // px\nconst BASE_ROUNDED_CORNER_RADIUS = 15; // px\nconst BASE_STROKE_WIDTH = 2.5; // px\nconst MIN_STROKE_WIDTH = 1; // px\nconst HALF = BASE_DIE_SIZE / 2; // px\nconst THIRD = BASE_DIE_SIZE / 3; // px\nconst PIP_SIZE = BASE_DIE_SIZE / 15; //px\nconst PIP_COLOR = \"black\";\n\nconst deg2rad = (deg) => {\n    return deg * (Math.PI / 180);\n};\n\nconst isPipNumber = n => {\n    const number = parseInt(n, 10);\n    return Number.isInteger(number) && 1 <= number && number <= NUMBER_OF_PIPS;\n};\n\n/**\n * Generate a random number of pips between 1 and the NUMBER_OF_PIPS.\n *\n * @returns {Number} A random number n, 1 ≤ n ≤ NUMBER_OF_PIPS.\n */\nconst randomPips = () => Math.floor(Math.random() * NUMBER_OF_PIPS) + 1;\n\nconst DIE_UNICODE_CHARACTERS = [\"⚀\",\"⚁\",\"⚂\",\"⚃\",\"⚄\",\"⚅\"];\n\n/**\n * Convert a unicode character representing a die face to the number of pips of\n * that same die. This function is the reverse of pipsToUnicode.\n *\n * @param {String} u - The unicode character to convert to pips.\n * @returns {Number|undefined} The corresponding number of pips, 1 ≤ pips ≤ 6, or\n * undefined if u was not a unicode character representing a die.\n */\nconst unicodeToPips = (u) => {\n    const dieCharIndex = DIE_UNICODE_CHARACTERS.indexOf(u);\n    return 0 <= dieCharIndex ? dieCharIndex + 1 : undefined;\n};\n\n/**\n * Convert a number of pips, 1 ≤ pips ≤ 6 to a unicode character\n * representation of the corresponding die face. This function is the reverse\n * of unicodeToPips.\n *\n * @param {Number} p - The number of pips to convert to a unicode character.\n * @returns {String|undefined} The corresponding unicode characters or\n * undefined if p was not between 1 and 6 inclusive.\n */\nconst pipsToUnicode = p => isPipNumber(p) ? DIE_UNICODE_CHARACTERS[p - 1] : undefined;\n\nconst renderHold = (context, x, y, width, color) => {\n    const SEPERATOR = width / 30;\n    context.save();\n    context.globalAlpha = DEFAULT_OPACITY;\n    context.beginPath();\n    context.fillStyle = color;\n    context.arc(x + width, y + width, width - SEPERATOR, 0, 2 * Math.PI, false);\n    context.fill();\n    context.restore();\n};\n\nconst renderDie = (context, x, y, width, color) => {\n    const SCALE = (width / HALF);\n    const HALF_INNER_SIZE = Math.sqrt(width ** 2 / 2);\n    const INNER_SIZE = 2 * HALF_INNER_SIZE;\n    const ROUNDED_CORNER_RADIUS = BASE_ROUNDED_CORNER_RADIUS * SCALE;\n    const INNER_SIZE_ROUNDED = INNER_SIZE - 2 * ROUNDED_CORNER_RADIUS;\n    const STROKE_WIDTH = Math.max(MIN_STROKE_WIDTH, BASE_STROKE_WIDTH * SCALE);\n\n    const startX = x + width - HALF_INNER_SIZE + ROUNDED_CORNER_RADIUS;\n    const startY = y + width - HALF_INNER_SIZE;\n\n    context.save();\n    context.beginPath();\n    context.fillStyle = color;\n    context.strokeStyle = \"black\";\n    context.lineWidth = STROKE_WIDTH;\n    context.moveTo(startX, startY);\n    context.lineTo(startX + INNER_SIZE_ROUNDED, startY);\n    context.arc(startX + INNER_SIZE_ROUNDED, startY + ROUNDED_CORNER_RADIUS, ROUNDED_CORNER_RADIUS, deg2rad(270), deg2rad(0));\n    context.lineTo(startX + INNER_SIZE_ROUNDED + ROUNDED_CORNER_RADIUS, startY + INNER_SIZE_ROUNDED + ROUNDED_CORNER_RADIUS);\n    context.arc(startX + INNER_SIZE_ROUNDED, startY + INNER_SIZE_ROUNDED + ROUNDED_CORNER_RADIUS, ROUNDED_CORNER_RADIUS, deg2rad(0), deg2rad(90));\n    context.lineTo(startX, startY + INNER_SIZE);\n    context.arc(startX, startY + INNER_SIZE_ROUNDED + ROUNDED_CORNER_RADIUS, ROUNDED_CORNER_RADIUS, deg2rad(90), deg2rad(180));\n    context.lineTo(startX - ROUNDED_CORNER_RADIUS, startY + ROUNDED_CORNER_RADIUS);\n    context.arc(startX, startY + ROUNDED_CORNER_RADIUS, ROUNDED_CORNER_RADIUS, deg2rad(180), deg2rad(270));\n\n    context.stroke();\n    context.fill();\n    context.restore();\n};\n\nconst renderPip = (context, x, y, width) => {\n    context.save();\n    context.beginPath();\n    context.fillStyle = PIP_COLOR;\n    context.moveTo(x, y);\n    context.arc(x, y, width, 0, 2 * Math.PI, false);\n    context.fill();\n    context.restore();\n};\n\n\n// Private properties\nconst _board = new WeakMap();\nconst _color = new WeakMap();\nconst _heldBy = new WeakMap();\nconst _pips = new WeakMap();\nconst _rotation = new WeakMap();\nconst _x = new WeakMap();\nconst _y = new WeakMap();\n\n/**\n * TopDieHTMLElement is the \"top-die\" custom [HTML\n * element](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) representing a die\n * on the dice board.\n *\n * @extends HTMLElement\n * @mixes module:mixin/ReadOnlyAttributes~ReadOnlyAttributes\n */\nconst TopDieHTMLElement = class extends ReadOnlyAttributes(HTMLElement) {\n\n    /**\n     * Create a new TopDieHTMLElement.\n     */\n    constructor() {\n        super();\n\n        // Ensure every die has a pips, 1 <= pips <= 6\n        let pips = NaN;\n        if (this.hasAttribute(PIPS_ATTRIBUTE)) {\n            pips = parseInt(this.getAttribute(PIPS_ATTRIBUTE), 10);\n        }\n\n        if (Number.isNaN(pips) || 1 > pips || 6 < pips) {\n            pips = randomPips();\n        }\n\n        _pips.set(this, pips);\n        this.setAttribute(PIPS_ATTRIBUTE, pips);\n\n        // Other attributes. TODO: add validation.\n        if (this.hasAttribute(COLOR_ATTRIBUTE)) {\n            this.color = this.getAttribute(COLOR_ATTRIBUTE);\n        } else {\n            this.color = DEFAULT_COLOR;\n        }\n\n        if (this.hasAttribute(ROTATION_ATTRIBUTE)) {\n            this.rotation = parseInt(this.getAttribute(ROTATION_ATTRIBUTE), 10);\n        } else {\n            this.rotation = DEFAULT_ROTATION;\n        }\n\n        if (this.hasAttribute(X_ATTRIBUTE)) {\n            this.x = parseInt(this.getAttribute(X_ATTRIBUTE), 10);\n        } else {\n            this.x = DEFAULT_X;\n        }\n\n        if (this.hasAttribute(Y_ATTRIBUTE)) {\n            this.y = parseInt(this.getAttribute(Y_ATTRIBUTE), 10);\n        } else {\n            this.y = DEFAULT_Y;\n        }\n\n        if (this.hasAttribute(HELD_BY_ATTRIBUTE)) {\n            this.heldBy = this.getAttribute(HELD_BY_ATTRIBUTE);\n        } else {\n            this.heldBy = null;\n        }\n\n    }\n\n    static get observedAttributes() {\n        return [\n            COLOR_ATTRIBUTE,\n            HELD_BY_ATTRIBUTE,\n            PIPS_ATTRIBUTE,\n            ROTATION_ATTRIBUTE,\n            X_ATTRIBUTE,\n            Y_ATTRIBUTE\n        ];\n    }\n\n    connectedCallback() {\n        _board.set(this, this.parentNode);\n        _board.get(this).dispatchEvent(new Event(\"top-die:added\"));\n    }\n\n    disconnectedCallback() {\n        _board.get(this).dispatchEvent(new Event(\"top-die:removed\"));\n        _board.set(this, null);\n    }\n\n    /**\n     * Convert this Die to the corresponding unicode character of a die face.\n     *\n     * @return {String} The unicode character corresponding to the number of\n     * pips of this Die.\n     */\n    toUnicode() {\n        return pipsToUnicode(this.pips);\n    }\n\n    /**\n     * Create a string represenation for this die.\n     *\n     * @return {String} The unicode symbol corresponding to the number of pips\n     * of this die.\n     */\n    toString() {\n        return this.toUnicode();\n    }\n\n    /**\n     * This Die's number of pips, 1 ≤ pips ≤ 6.\n     *\n     * @type {Number}\n     */\n    get pips() {\n        return _pips.get(this);\n    }\n\n    /**\n     * This Die's color.\n     *\n     * @type {String}\n     */\n    get color() {\n        return _color.get(this);\n    }\n    set color(newColor) {\n        if (null === newColor) {\n            this.removeAttribute(COLOR_ATTRIBUTE);\n            _color.set(this, DEFAULT_COLOR);\n        } else {\n            _color.set(this, newColor);\n            this.setAttribute(COLOR_ATTRIBUTE, newColor);\n        }\n    }\n\n\n    /**\n     * The Player that is holding this Die, if any. Null otherwise.\n     *\n     * @type {Player|null} \n     */\n    get heldBy() {\n        return _heldBy.get(this);\n    }\n    set heldBy(player) {\n        _heldBy.set(this, player);\n        if (null === player) {\n            this.removeAttribute(\"held-by\");\n        } else {\n            this.setAttribute(\"held-by\", player.toString());\n        }\n    }\n\n    /**\n     * The coordinates of this Die.\n     *\n     * @type {Coordinates|null}\n     */\n    get coordinates() {\n        return null === this.x || null === this.y ? null : {x: this.x, y: this.y};\n    }\n    set coordinates(c) {\n        if (null === c) {\n            this.x = null;\n            this.y = null;\n        } else{\n            const {x, y} = c;\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    /**\n     * Does this Die have coordinates?\n     *\n     * @return {Boolean} True when the Die does have coordinates\n     */\n    hasCoordinates() {\n        return null !== this.coordinates;\n    }\n\n    /**\n     * The x coordinate\n     *\n     * @type {Number}\n     */\n    get x() {\n        return _x.get(this);\n    }\n    set x(newX) {\n        _x.set(this, newX);\n        this.setAttribute(\"x\", newX);\n    }\n\n    /**\n     * The y coordinate\n     *\n     * @type {Number}\n     */\n    get y() {\n        return _y.get(this);\n    }\n    set y(newY) {\n        _y.set(this, newY);\n        this.setAttribute(\"y\", newY);\n    }\n\n    /**\n     * The rotation of this Die. 0 ≤ rotation ≤ 360.\n     *\n     * @type {Number|null}\n     */\n    get rotation() {\n        return _rotation.get(this);\n    }\n    set rotation(newR) {\n        if (null === newR) {\n            this.removeAttribute(\"rotation\");\n        } else {\n            const normalizedRotation = newR % CIRCLE_DEGREES;\n            _rotation.set(this, normalizedRotation);\n            this.setAttribute(\"rotation\", normalizedRotation);\n        }\n    }\n\n    /**\n     * Throw this Die. The number of pips to a random number n, 1 ≤ n ≤ 6.\n     * Only dice that are not being held can be thrown.\n     *\n     * @fires \"top:throw-die\" with parameters this Die.\n     */\n    throwIt() {\n        if (!this.isHeld()) {\n            _pips.set(this, randomPips());\n            this.setAttribute(PIPS_ATTRIBUTE, this.pips);\n            this.dispatchEvent(new Event(\"top:throw-die\", {\n                detail: {\n                    die: this\n                }\n            }));\n        }\n    }\n\n    /**\n     * The player holds this Die. A player can only hold a die that is not\n     * being held by another player yet.\n     *\n     * @param {module:Player~Player} player - The player who wants to hold this Die.\n     * @fires \"top:hold-die\" with parameters this Die and the player.\n     */\n    holdIt(player) {\n        if (!this.isHeld()) {\n            this.heldBy = player;\n            this.dispatchEvent(new Event(\"top:hold-die\", {\n                detail: {\n                    die: this,\n                    player\n                }\n            }));\n        }\n    }\n\n    /**\n     * Is this Die being held by any player?\n     *\n     * @return {Boolean} True when this Die is being held by any player, false otherwise.\n     */\n    isHeld() {\n        return null !== this.heldBy;\n    }\n\n    /**\n     * The player releases this Die. A player can only release dice that she is\n     * holding.\n     *\n     * @param {module:Player~Player} player - The player who wants to release this Die.\n     * @fires \"top:relase-die\" with parameters this Die and the player releasing it.\n     */\n    releaseIt(player) {\n        if (this.isHeld() && this.heldBy.equals(player)) {\n            this.heldBy = null;\n            this.removeAttribute(HELD_BY_ATTRIBUTE);\n            this.dispatchEvent(new CustomEvent(\"top:release-die\", {\n                detail: {\n                    die: this,\n                    player\n                }\n            }));\n        }\n    }\n\n    /**\n     * Render this Die.\n     *\n     * @param {CanvasRenderingContext2D} context - The canvas context to draw\n     * on\n     * @param {Number} dieSize - The size of a die.\n     * @param {Number} [coordinates = this.coordinates] - The coordinates to\n     * draw this die. By default, this die is drawn at its own coordinates,\n     * but you can also draw it elsewhere if so needed.\n     */\n    render(context, dieSize, coordinates = this.coordinates) {\n        const scale = dieSize / BASE_DIE_SIZE;\n        const SHALF = HALF * scale;\n        const STHIRD = THIRD * scale;\n        const SPIP_SIZE = PIP_SIZE * scale;\n\n        const {x, y} = coordinates;\n\n        if (this.isHeld()) {\n            renderHold(context, x, y, SHALF, this.heldBy.color);\n        }\n\n        if (0 !== this.rotation) {\n            context.translate(x + SHALF, y + SHALF);\n            context.rotate(deg2rad(this.rotation));\n            context.translate(-1 * (x + SHALF), -1 * (y + SHALF));\n        }\n\n        renderDie(context, x, y, SHALF, this.color);\n\n        switch (this.pips) {\n        case 1: {\n            renderPip(context, x + SHALF, y + SHALF, SPIP_SIZE);\n            break;\n        }\n        case 2: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            break;\n        }\n        case 3: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + SHALF, y + SHALF, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            break;\n        }\n        case 4: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + STHIRD, SPIP_SIZE);\n            break;\n        }\n        case 5: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + SHALF, y + SHALF, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + STHIRD, SPIP_SIZE);\n            break;\n        }\n        case 6: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + STHIRD, y + SHALF, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + SHALF, SPIP_SIZE);\n            break;\n        }\n        default: // No other values allowed / possible\n        }\n\n        // Clear context\n        context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n};\n\nwindow.customElements.define(\"top-die\", TopDieHTMLElement);\n\nexport {\n    TopDieHTMLElement,\n    unicodeToPips,\n    pipsToUnicode\n};\n","/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\nimport {DEFAULT_SYSTEM_PLAYER} from \"./TopPlayerHTMLElement.js\";\n\n/**\n * TopPlayerListHTMLElement to describe the players in the game.\n *\n * @extends HTMLElement\n */\nconst TopPlayerListHTMLElement = class extends HTMLElement {\n\n    /**\n     * Create a new TopPlayerListHTMLElement.\n     */\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (0 >= this.players.length) {\n            this.appendChild(DEFAULT_SYSTEM_PLAYER);\n        }\n\n        this.addEventListener(\"top:start-turn\", (event) => {\n            // Only one player can have a turn at any given time.\n            this.players\n                .filter(p => !p.equals(event.detail.player))\n                .forEach(p => p.endTurn());\n        });\n    }\n\n    disconnectedCallback() {\n    }\n\n    /**\n     * The players in this list.\n     *\n     * @type {module:TopPlayerHTMLElement~TopPlayerHTMLElement[]}\n     */\n    get players() {\n        return [...this.getElementsByTagName(\"top-player\")];\n    }\n};\n\nwindow.customElements.define(\"top-player-list\", TopPlayerListHTMLElement);\n\nexport {\n    TopPlayerListHTMLElement\n};\n","/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport {TopDiceBoardHTMLElement} from \"./TopDiceBoardHTMLElement.js\";\nimport {TopDieHTMLElement} from \"./TopDieHTMLElement.js\";\nimport {TopPlayerHTMLElement} from \"./TopPlayerHTMLElement.js\";\nimport {TopPlayerListHTMLElement} from \"./TopPlayerListHTMLElement.js\";\n\nwindow.twentyonepips = window.twentyonepips || Object.freeze({\n    VERSION: \"0.0.1\",\n    LICENSE: \"LGPL-3.0\",\n    WEBSITE: \"https://twentyonepips.org\",\n    HTMLElements: {\n        TopDiceBoardHTMLElement: TopDiceBoardHTMLElement,\n        TopDieHTMLElement: TopDieHTMLElement,\n        TopPlayerHTMLElement: TopPlayerHTMLElement,\n        TopPlayerListHTMLElement: TopPlayerListHTMLElement\n    }\n});\n"]}