{"version":3,"sources":["twenty-one-pips.es.js"],"names":["ConfigurationError","message","Error","FULL_CIRCLE_IN_DEGREES","randomizeCenter","n","Math","random","floor","ceil","call","_width","WeakMap","_height","_cols","_rows","_dice","_dieSize","_dispersion","_rotate","GridLayout","width","height","dispersion","dieSize","set","dice","length","maximumNumberOfDice","lenght","alreadyLayoutDice","diceToLayout","die","hasCoordinates","isHeld","push","max","min","availableCells","_computeAvailableCells","randomIndex","randomCell","splice","coordinates","_numberToCoordinates","rotation","rotate","round","available","Set","level","maxLevel","size","_cellsOnLevel","cell","undefined","_cellIsEmpty","add","Array","from","cells","center","_center","_cellToNumber","row","col","find","_coordinatesToNumber","trunc","_cellToCoords","_numberToCell","coords","_coordsToCell","x","y","cornerCell","corner","widthIn","widthOut","heightIn","heightOut","quadrants","q","coverage","snapTo","filter","quadrant","get","reduce","maxQ","point","xFit","yFit","w","_calculateGrid","h","d","ds","r","TopPlayerHTMLElement","name","oldValue","newValue","color","other","getAttribute","HTMLElement","window","customElements","define","DEFAULT_SYSTEM_PLAYER","setAttribute","DEFAULT_DIE_SIZE","DEFAULT_HOLD_DURATION","DEFAULT_DRAGGING_DICE_DISABLED","DEFAULT_HOLDING_DICE_DISABLED","DEFAULT_ROTATING_DICE_DISABLED","ROWS","COLS","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_DISPERSION","MIN_DELTA","WIDTH_ATTRIBUTE","HEIGHT_ATTRIBUTE","DISPERSION_ATTRIBUTE","DIE_SIZE_ATTRIBUTE","DRAGGING_DICE_DISABLED_ATTRIBUTE","HOLDING_DICE_DISABLED_ATTRIBUTE","ROTATING_DICE_DISABLED_ATTRIBUTE","HOLD_DURATION_ATTRIBUTE","parseNumber","numberString","defaultNumber","number","parseInt","Number","isNaN","validatePositiveNumber","maxNumber","Infinity","getPositiveNumber","defaultValue","value","getPositiveNumberAttribute","element","hasAttribute","valueString","getBoolean","booleanString","trueValue","getBooleanAttribute","_canvas","_layout","_currentPlayer","_numberOfReadyDice","getReadyDice","board","updateReadyDice","update","NONE","Symbol","HOLD","MOVE","INDETERMINED","DRAGGING","convertWindowCoordinatesToCanvas","canvas","xWindow","yWindow","canvasBox","getBoundingClientRect","left","top","setupInteraction","origin","state","staticBoard","dieUnderCursor","holdTimeout","holdDie","releaseIt","currentPlayer","holdIt","_update","startHolding","setTimeout","holdDuration","stopHolding","clearTimeout","startInteraction","event","clientX","clientY","layout","getAt","disabledHoldingDice","disabledDraggingDice","showInteraction","style","cursor","move","dx","abs","dy","diceWithoutDieUnderCursor","context","getImageData","putImageData","render","stopInteraction","snapToCoords","newCoords","touchCoordinates","touch2mouseEvent","mouseEventName","touchEvent","touches","dispatchEvent","MouseEvent","addEventListener","TopDiceBoardHTMLElement","display","shadow","attachShadow","mode","document","createElement","appendChild","disabledRotation","_isReady","querySelector","playerName","playerList","player","forEach","throwIt","clearRect","getContext","getElementsByTagName","newPlayer","NUMBER_OF_PIPS","DEFAULT_COLOR","DEFAULT_X","DEFAULT_Y","DEFAULT_ROTATION","DEFAULT_OPACITY","BASE_DIE_SIZE","BASE_ROUNDED_CORNER_RADIUS","BASE_STROKE_WIDTH","MIN_STROKE_WIDTH","HALF","THIRD","PIP_SIZE","PIP_COLOR","deg2rad","deg","PI","isPipNumber","isInteger","randomPips","DIE_UNICODE_CHARACTERS","pipsToUnicode","p","renderHold","SEPERATOR","save","globalAlpha","beginPath","fillStyle","arc","fill","restore","renderDie","SCALE","HALF_INNER_SIZE","sqrt","INNER_SIZE","ROUNDED_CORNER_RADIUS","INNER_SIZE_ROUNDED","STROKE_WIDTH","startX","startY","strokeStyle","lineWidth","moveTo","lineTo","stroke","renderPip","_board","_pips","_x","_y","_rotation","_heldBy","TopDieHTMLElement","parentNode","pips","NaN","Event","CustomEvent","detail","heldBy","equals","scale","SHALF","STHIRD","SPIP_SIZE","translate","setTransform","getPlayer","removeAttribute","toString","c","newX","newY","newR","TopPlayerListHTMLElement","players","foundPlayers","twentyonepips","version","TopDiceBoard","TopDie","TopPlayer","TopPlayerList"],"mappings":"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","file":"twenty-one-pips.js","sourcesContent":["/** \n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n\n/**\n * @module\n */\n\n/**\n * ConfigurationError\n *\n * @extends Error\n */\nconst ConfigurationError = class extends Error {\n\n    /**\n     * Create a new ConfigurationError with message.\n     *\n     * @param {String} message - The message associated with this\n     * ConfigurationError.\n     */\n    constructor(message) {\n        super(message);\n    }\n};\n\n/** \n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n/**\n * @module\n */\n\nconst FULL_CIRCLE_IN_DEGREES = 360;\n\nconst randomizeCenter = (n) => {\n    return (0.5 <= Math.random() ? Math.floor : Math.ceil).call(0, n);\n};\n\n// Private fields\nconst _width = new WeakMap();\nconst _height = new WeakMap();\nconst _cols = new WeakMap();\nconst _rows = new WeakMap();\nconst _dice = new WeakMap();\nconst _dieSize = new WeakMap();\nconst _dispersion = new WeakMap();\nconst _rotate = new WeakMap();\n\n/**\n * @typedef {Object} GridLayoutConfiguration\n * @property {Number} config.width - The minimal width of this\n * GridLayout in pixels.;\n * @property {Number} config.height] - The minimal height of\n * this GridLayout in pixels..\n * @property {Number} config.dispersion - The distance from the center of the\n * layout a die can be layout.\n * @property {Number} config.dieSize - The size of a die.\n */\n\n/**\n * GridLayout handles laying out the dice on a DiceBoard.\n */\nconst GridLayout = class {\n\n    /**\n     * Create a new GridLayout.\n     *\n     * @param {GridLayoutConfiguration} config - The configuration of the GridLayout\n     */\n    constructor({\n        width,\n        height,\n        dispersion,\n        dieSize\n    } = {}) {\n        _dice.set(this, []);\n        _dieSize.set(this, 1);\n        _width.set(this, 0);\n        _height.set(this, 0);\n        _rotate.set(this, true);\n\n        this.dispersion = dispersion;\n        this.dieSize = dieSize;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * The width in pixels used by this GridLayout.\n     * @throws module:error/ConfigurationError.ConfigurationError Width >= 0\n     * @type {Number} \n     */\n    get width() {\n        return _width.get(this);\n    }\n\n    set width(w) {\n        if (0 > w) {\n            throw new ConfigurationError(`Width should be a number larger than 0, got '${w}' instead.`);\n        }\n        _width.set(this, w);\n        this._calculateGrid(this.width, this.height);\n    }\n\n    /**\n     * The height in pixels used by this GridLayout. \n     * @throws module:error/ConfigurationError.ConfigurationError Height >= 0\n     *\n     * @type {Number}\n     */\n    get height() {\n        return _height.get(this);\n    }\n\n    set height(h) {\n        if (0 > h) {\n            throw new ConfigurationError(`Height should be a number larger than 0, got '${h}' instead.`);\n        }\n        _height.set(this, h);\n        this._calculateGrid(this.width, this.height);\n    }\n\n    /**\n     * The maximum number of dice that can be layout on this GridLayout. This\n     * number is >= 0. Read only.\n     *\n     * @type {Number}\n     */\n    get maximumNumberOfDice() {\n        return this._cols * this._rows;\n    }\n\n    /**\n     * The dispersion level used by this GridLayout. The dispersion level\n     * indicates the distance from the center dice can be layout. Use 1 for a\n     * tight packed layout.\n     *\n     * @throws module:error/ConfigurationError.ConfigurationError Dispersion >= 0\n     * @type {Number}\n     */\n    get dispersion() {\n        return _dispersion.get(this);\n    }\n\n    set dispersion(d) {\n        if (0 > d) {\n            throw new ConfigurationError(`Dispersion should be a number larger than 0, got '${d}' instead.`);\n        }\n        return _dispersion.set(this, d);\n    }\n\n    /**\n     * The size of a die.\n     *\n     * @throws module:error/ConfigurationError.ConfigurationError DieSize >= 0\n     * @type {Number}\n     */\n    get dieSize() {\n        return _dieSize.get(this);\n    }\n\n    set dieSize(ds) {\n        if (0 >= ds) {\n            throw new ConfigurationError(`dieSize should be a number larger than 1, got '${ds}' instead.`);\n        }\n        _dieSize.set(this, ds);\n        this._calculateGrid(this.width, this.height);\n    }\n\n    get rotate() {\n        const r = _rotate.get(this);\n        return undefined === r ? true : r;\n    }\n\n    set rotate(r) {\n        _rotate.set(this, r);\n    }\n\n    /**\n     * The number of rows in this GridLayout.\n     *\n     * @return {Number} The number of rows, 0 < rows.\n     * @private\n     */\n    get _rows() {\n        return _rows.get(this);\n    }\n\n    /**\n     * The number of columns in this GridLayout.\n     *\n     * @return {Number} The number of columns, 0 < columns.\n     * @private\n     */\n    get _cols() {\n        return _cols.get(this);\n    }\n\n    /**\n     * The center cell in this GridLayout.\n     *\n     * @return {Object} The center (row, col).\n     * @private\n     */\n    get _center() {\n        const row = randomizeCenter(this._rows / 2) - 1;\n        const col = randomizeCenter(this._cols / 2) - 1;\n\n        return {row, col};\n    }\n\n    /**\n     * Layout dice on this GridLayout.\n     *\n     * @param {module:Die~Die[]} dice - The dice to layout on this Layout.\n     * @return {module:Die~Die[]} The same list of dice, but now layout.\n     *\n     * @throws {module:error/ConfigurationError~ConfigurationError} The number of\n     * dice should not exceed the maximum number of dice this Layout can\n     * layout.\n     */\n    layout(dice) {\n        if (dice.length > this.maximumNumberOfDice) {\n            throw new ConfigurationError(`The number of dice that can be layout is ${this.maximumNumberOfDice}, got ${dice.lenght} dice instead.`);\n        }\n\n        const alreadyLayoutDice = [];\n        const diceToLayout = [];\n\n        for (const die of dice) {\n            if (die.hasCoordinates() && die.isHeld()) {\n                // Dice that are being held and have been layout before should\n                // keep their current coordinates and rotation. In other words,\n                // these dice are skipped.\n                alreadyLayoutDice.push(die);\n            } else {\n                diceToLayout.push(die);\n            }\n        }\n\n        const max = Math.min(dice.length * this.dispersion, this.maximumNumberOfDice);\n        const availableCells = this._computeAvailableCells(max, alreadyLayoutDice);\n\n        for (const die of diceToLayout) {\n            const randomIndex = Math.floor(Math.random() * availableCells.length);\n            const randomCell = availableCells[randomIndex];\n            availableCells.splice(randomIndex, 1);\n\n            die.coordinates = this._numberToCoordinates(randomCell);\n            die.rotation = this.rotate ? Math.round(Math.random() * FULL_CIRCLE_IN_DEGREES) : null;\n            alreadyLayoutDice.push(die);\n        }\n\n        _dice.set(this, alreadyLayoutDice);\n\n        return alreadyLayoutDice;\n    }\n\n    /**\n     * Compute a list with available cells to place dice on.\n     *\n     * @param {Number} max - The number empty cells to compute.\n     * @param {Die[]} alreadyLayoutDice - A list with dice that have already been layout.\n     * \n     * @return {NUmber[]} The list of available cells represented by their number.\n     * @private\n     */\n    _computeAvailableCells(max, alreadyLayoutDice) {\n        const available = new Set();\n        let level = 0;\n        const maxLevel = Math.min(this._rows, this._cols);\n\n        while (available.size < max && level < maxLevel) {\n            for (const cell of this._cellsOnLevel(level)) {\n                if (undefined !== cell && this._cellIsEmpty(cell, alreadyLayoutDice)) {\n                    available.add(cell);\n                }\n            }\n\n            level++;\n        }\n\n        return Array.from(available);\n    }\n\n    /**\n     * Calculate all cells on level from the center of the layout.\n     *\n     * @param {Number} level - The level from the center of the layout. 0\n     * indicates the center.\n     *\n     * @return {Set<Number>} the cells on the level in this layout represented by\n     * their number.\n     * @private\n     */\n    _cellsOnLevel(level) {\n        const cells = new Set();\n        const center = this._center;\n\n        if (0 === level) {\n            cells.add(this._cellToNumber(center));\n        } else {\n            for (let row = center.row - level; row <= center.row + level; row++) {\n                cells.add(this._cellToNumber({row, col: center.col - level}));\n                cells.add(this._cellToNumber({row, col: center.col + level}));\n            }\n\n            for (let col = center.col - level + 1; col < center.col + level; col++) {\n                cells.add(this._cellToNumber({row: center.row - level, col}));\n                cells.add(this._cellToNumber({row: center.row + level, col}));\n            }\n        }\n\n        return cells;\n    }\n\n    /**\n     * Does cell contain a cell from alreadyLayoutDice?\n     *\n     * @param {Number} cell - A cell in layout represented by a number.\n     * @param {Die[]} alreadyLayoutDice - A list of dice that have already been layout.\n     *\n     * @return {Boolean} True if cell does not contain a die.\n     * @private\n     */\n    _cellIsEmpty(cell, alreadyLayoutDice) {\n        return undefined === alreadyLayoutDice.find(die => cell === this._coordinatesToNumber(die.coordinates));\n    }\n\n    /**\n     * Convert a number to a cell (row, col)\n     *\n     * @param {Number} n - The number representing a cell\n     * @returns {Object} Return the cell ({row, col}) corresponding n.\n     * @private\n     */\n    _numberToCell(n) {\n        return {row: Math.trunc(n / this._cols), col: n % this._cols};\n    }\n\n    /**\n     * Convert a cell to a number\n     *\n     * @param {Object} cell - The cell to convert to its number.\n     * @return {Number|undefined} The number corresponding to the cell.\n     * Returns undefined when the cell is not on the layout\n     * @private\n     */\n    _cellToNumber({row, col}) {\n        if (0 <= row && row < this._rows && 0 <= col && col < this._cols) {\n            return row * this._cols + col;\n        }\n        return undefined;\n    }\n\n    /**\n     * Convert a cell represented by its number to their coordinates.\n     *\n     * @param {Number} n - The number representing a cell\n     *\n     * @return {Object} The coordinates corresponding to the cell represented by\n     * this number.\n     * @private\n     */\n    _numberToCoordinates(n) {\n        return this._cellToCoords(this._numberToCell(n));\n    }\n\n    /**\n     * Convert a pair of coordinates to a number.\n     *\n     * @param {Object} coords - The coordinates to convert\n     *\n     * @return {Number|undefined} The coordinates converted to a number. If\n     * the coordinates are not on this layout, the number is undefined.\n     * @private\n     */\n    _coordinatesToNumber(coords) {\n        const n = this._cellToNumber(this._coordsToCell(coords));\n        if (0 <= n && n < this.maximumNumberOfDice) {\n            return n;\n        }\n        return undefined;\n    }\n\n    /**\n     * Snap (x,y) to the closest cell in this Layout.\n     *\n     * @param {Object} diecoordinate - The coordinate to find the closest cell\n     * for.\n     * @param {Die} [diecoordinat.die = null] - The die to snap to.\n     * @param {Number} diecoordinate.x - The x-coordinate.\n     * @param {Number} diecoordinate.y - The y-coordinate.\n     *\n     * @return {Object|null} The coordinate of the cell closest to (x, y).\n     * Null when no suitable cell is near (x, y)\n     */\n    snapTo({die = null, x, y}) {\n        const cornerCell = {\n            row: Math.trunc(y / this.dieSize),\n            col: Math.trunc(x / this.dieSize)\n        };\n\n        const corner = this._cellToCoords(cornerCell);\n        const widthIn = corner.x + this.dieSize - x;\n        const widthOut = this.dieSize - widthIn;\n        const heightIn = corner.y + this.dieSize - y;\n        const heightOut = this.dieSize - heightIn;\n\n        const quadrants = [{\n            q: this._cellToNumber(cornerCell),\n            coverage: widthIn * heightIn\n        }, {\n            q: this._cellToNumber({\n                row: cornerCell.row,\n                col: cornerCell.col + 1\n            }),\n            coverage: widthOut * heightIn\n        }, {\n            q: this._cellToNumber({\n                row: cornerCell.row + 1,\n                col: cornerCell.col\n            }),\n            coverage: widthIn * heightOut\n        }, {\n            q: this._cellToNumber({\n                row: cornerCell.row + 1,\n                col: cornerCell.col + 1\n            }),\n            coverage: widthOut * heightOut\n        }];\n\n        const snapTo = quadrants\n            // cell should be on the layout\n            .filter((quadrant) => undefined !== quadrant.q)\n            // cell should be not already taken except by itself\n            .filter((quadrant) => (\n                null !== die && this._coordinatesToNumber(die.coordinates) === quadrant.q)\n                || this._cellIsEmpty(quadrant.q, _dice.get(this)))\n            // cell should be covered by the die the most\n            .reduce(\n                (maxQ, quadrant) => quadrant.coverage > maxQ.coverage ? quadrant : maxQ,\n                {q: undefined, coverage: -1}\n            );\n\n        return undefined !== snapTo.q ? this._numberToCoordinates(snapTo.q) : null;\n    }\n\n    /**\n     * Get the die at point (x, y);\n     *\n     * @param {Point} point - The point in (x, y) coordinates\n     * @return {Die|null} The die under coordinates (x, y) or null if no die\n     * is at the point.\n     */\n    getAt(point = {x: 0, y: 0}) {\n        for (const die of _dice.get(this)) {\n            const {x, y} = die.coordinates;\n\n            const xFit = x <= point.x && point.x <= x + this.dieSize;\n            const yFit = y <= point.y && point.y <= y + this.dieSize;\n\n            if (xFit && yFit) {\n                return die;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Calculate the grid size given width and height.\n     *\n     * @param {Number} width - The minimal width\n     * @param {Number} height - The minimal height\n     *\n     * @private\n     */\n    _calculateGrid(width, height) {\n        _cols.set(this, Math.floor(width / this.dieSize));\n        _rows.set(this, Math.floor(height / this.dieSize));\n    }\n\n    /**\n     * Convert a (row, col) cell to (x, y) coordinates.\n     *\n     * @param {Object} cell - The cell to convert to coordinates\n     * @return {Object} The corresponding coordinates.\n     * @private\n     */\n    _cellToCoords({row, col}) {\n        return {x: col * this.dieSize, y: row * this.dieSize};\n    }\n\n    /**\n     * Convert (x, y) coordinates to a (row, col) cell.\n     *\n     * @param {Object} coordinates - The coordinates to convert to a cell.\n     * @return {Object} The corresponding cell\n     * @private\n     */\n    _coordsToCell({x, y}) {\n        return {\n            row: Math.trunc(y / this.dieSize),\n            col: Math.trunc(x / this.dieSize)\n        };\n    }\n};\n\n/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n/**\n * TopPlayerHTMLElement -- A Player of a dice game.\n *\n * A Player's name and color should be unique in a game. Two different Player\n * instances with the same name and same color are considered the same Player.\n *\n */\nconst TopPlayerHTMLElement = class extends HTMLElement {\n    constructor() {\n        super();\n    }\n\n    static get observedAttributes() {\n        return [];\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n    }\n\n    connectedCallback() {\n        if (\"string\" !== typeof this.name || \"\" === this.name) {\n            throw new ConfigurationError(\"A Player needs a name, which is a String.\");\n        }\n        if (\"string\" !== typeof this.color || \"\" === this.color) {\n            throw new ConfigurationError(\"A Player needs a color, which is a String.\");\n        }\n    }\n\n    disconnectedCallback() {\n    }\n\n    /**\n     * This Player's name.\n     *\n     * @return {String} This Player's name.\n     */\n    get name() {\n        return this.getAttribute(\"name\");\n    }\n\n    /**\n     * This Player's color.\n     *\n     * @return {String} This Player's color.\n     */\n    get color() {\n        return this.getAttribute(\"color\");\n    }\n\n    toString() {\n        return `${this.name}`;\n    }\n\n    /**\n     * Is this Player equat another player?\n     * \n     * @param {Player} other - The other Player to compare this Player with.\n     * @return {Boolean} True when either the object references are the same\n     * or when both name and color are the same.\n     */\n    equals(other) {\n        const name = \"string\" === typeof other ? other : other.name;\n        return other === this || name === this.name;\n    }\n};\n\nwindow.customElements.define(\"top-player\", TopPlayerHTMLElement);\n\n/**\n * The default system player. Dice are thrown by a player. For situations\n * where you want to render a bunch of dice without needing the concept of Players\n * this DEFAULT_SYSTEM_PLAYER can be a substitute. Of course, if you'd like to\n * change the name and/or the color, create and use your own \"system player\".\n * @const\n */\nconst DEFAULT_SYSTEM_PLAYER = new TopPlayerHTMLElement();\nDEFAULT_SYSTEM_PLAYER.setAttribute(\"name\", \"*\");\nDEFAULT_SYSTEM_PLAYER.setAttribute(\"color\", \"red\");\n\n/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n//import {ConfigurationError} from \"./error/ConfigurationError.js\";\n/**\n * @module\n */\n\nconst DEFAULT_DIE_SIZE = 100; // px\nconst DEFAULT_HOLD_DURATION = 375; // ms\nconst DEFAULT_DRAGGING_DICE_DISABLED = false;\nconst DEFAULT_HOLDING_DICE_DISABLED = false;\nconst DEFAULT_ROTATING_DICE_DISABLED = false;\n\nconst ROWS = 10;\nconst COLS = 10;\n\nconst DEFAULT_WIDTH = COLS * DEFAULT_DIE_SIZE; // px\nconst DEFAULT_HEIGHT = ROWS * DEFAULT_DIE_SIZE; // px\nconst DEFAULT_DISPERSION = Math.floor(ROWS / 2);\n\nconst MIN_DELTA = 3; //px\n\nconst WIDTH_ATTRIBUTE = \"width\";\nconst HEIGHT_ATTRIBUTE = \"height\";\nconst DISPERSION_ATTRIBUTE = \"dispersion\";\nconst DIE_SIZE_ATTRIBUTE = \"die-size\";\nconst DRAGGING_DICE_DISABLED_ATTRIBUTE = \"dragging-dice-disabled\";\nconst HOLDING_DICE_DISABLED_ATTRIBUTE = \"holding-dice-disabled\";\nconst ROTATING_DICE_DISABLED_ATTRIBUTE = \"rotating-dice-disabled\";\nconst HOLD_DURATION_ATTRIBUTE = \"hold-duration\";\n\n\nconst parseNumber = (numberString, defaultNumber = 0) => {\n    const number = parseInt(numberString, 10);\n    return Number.isNaN(number) ? defaultNumber : number;\n};\n\nconst validatePositiveNumber = (number, maxNumber = Infinity) => {\n    return 0 <= number && number < maxNumber;\n};\n\nconst getPositiveNumber = (numberString, defaultValue) => {\n    const value = parseNumber(numberString, defaultValue);\n    return validatePositiveNumber(value) ? value : defaultValue;\n};\n\nconst getPositiveNumberAttribute = (element, name, defaultValue) => {\n    if (element.hasAttribute(name)) {\n        const valueString = element.getAttribute(name);\n        return getPositiveNumber(valueString, defaultValue);\n    }\n    return defaultValue;\n};\n\nconst getBoolean = (booleanString, trueValue, defaultValue) => {\n    if (trueValue === booleanString || \"true\" === booleanString) {\n        return true;\n    } else if (\"false\" === booleanString) {\n        return false;\n    } else {\n        return defaultValue;\n    }\n};\n\nconst getBooleanAttribute = (element, name, defaultValue) => {\n    if (element.hasAttribute(name)) {\n        const valueString = element.getAttribute(name);\n        return getBoolean(valueString, [valueString, \"true\"], [\"false\"], defaultValue);\n    }\n\n    return defaultValue;\n};\n\n// Private properties\nconst _canvas = new WeakMap();\nconst _layout = new WeakMap();\nconst _currentPlayer = new WeakMap();\nconst _numberOfReadyDice = new WeakMap();\n\nconst getReadyDice = (board) => {\n    if (undefined === _numberOfReadyDice.get(board)) {\n        _numberOfReadyDice.set(board, 0);\n    }\n\n    return _numberOfReadyDice.get(board);\n};\n\nconst updateReadyDice = (board, update) => {\n    _numberOfReadyDice.set(board, getReadyDice(board) + update);\n};\n\n\n// Interaction states\nconst NONE = Symbol(\"no_interaction\");\nconst HOLD = Symbol(\"hold\");\nconst MOVE = Symbol(\"move\");\nconst INDETERMINED = Symbol(\"indetermined\");\nconst DRAGGING = Symbol(\"dragging\");\n\n// Methods to handle interaction\nconst convertWindowCoordinatesToCanvas = (canvas, xWindow, yWindow) => {\n    const canvasBox = canvas.getBoundingClientRect();\n\n    const x = xWindow - canvasBox.left * (canvas.width / canvasBox.width);\n    const y = yWindow - canvasBox.top * (canvas.height / canvasBox.height);\n\n    return {x, y};\n};\n\nconst setupInteraction = (board) => {\n    const canvas = _canvas.get(board);\n\n    // Setup interaction\n    let origin = {};\n    let state = NONE;\n    let staticBoard = null;\n    let dieUnderCursor = null;\n    let holdTimeout = null;\n\n    const holdDie = () => {\n        if (HOLD === state || INDETERMINED === state) {\n            // toggle hold / release\n            if (dieUnderCursor.isHeld()) {\n                dieUnderCursor.releaseIt(board.currentPlayer);\n            } else {\n                dieUnderCursor.holdIt(board.currentPlayer);\n            }\n            state = NONE;\n\n            board._update();\n        }\n\n        holdTimeout = null;\n    };\n\n    const startHolding = () => {\n        holdTimeout = window.setTimeout(holdDie, board.holdDuration);\n    };\n\n    const stopHolding = () => {\n        window.clearTimeout(holdTimeout);\n        holdTimeout = null;\n    };\n\n    const startInteraction = (event) => {\n        if (NONE === state) {\n\n            origin = {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            dieUnderCursor = board.layout.getAt(convertWindowCoordinatesToCanvas(canvas, event.clientX, event.clientY));\n\n            if (null !== dieUnderCursor) {\n                // Only interaction with the board via a die\n                if (!board.disabledHoldingDice && !board.disabledDraggingDice) {\n                    state = INDETERMINED;\n                    startHolding();\n                } else if (!board.disabledHoldingDice) {\n                    state = HOLD;\n                    startHolding();\n                } else if (!board.disabledDraggingDice) {\n                    state = MOVE;\n                }\n            }\n\n        }\n    };\n\n    const showInteraction = (event) => {\n        const dieUnderCursor = board.layout.getAt(convertWindowCoordinatesToCanvas(canvas, event.clientX, event.clientY));\n        if (DRAGGING === state) {\n            canvas.style.cursor = \"grabbing\";\n        } else if (null !== dieUnderCursor) {\n            canvas.style.cursor = \"grab\";\n        } else {\n            canvas.style.cursor = \"default\";\n        }\n    };\n\n    const move = (event) => {\n        if (MOVE === state || INDETERMINED === state) {\n            // determine if a die is under the cursor\n            // Ignore small movements\n            const dx = Math.abs(origin.x - event.clientX);\n            const dy = Math.abs(origin.y - event.clientY);\n\n            if (MIN_DELTA < dx || MIN_DELTA < dy) {\n                state = DRAGGING;\n                stopHolding();\n\n                const diceWithoutDieUnderCursor = board.dice.filter(die => die !== dieUnderCursor);\n                board._update(diceWithoutDieUnderCursor);\n                staticBoard = board.context.getImageData(0, 0, canvas.width, canvas.height);\n            }\n        } else if (DRAGGING === state) {\n            const dx = origin.x - event.clientX;\n            const dy = origin.y - event.clientY;\n\n            const {x, y} = dieUnderCursor.coordinates;\n\n            board.context.putImageData(staticBoard, 0, 0);\n            dieUnderCursor.render(board.context, board.dieSize, {x: x - dx, y: y - dy});\n        }\n    };\n\n    const stopInteraction = (event) => {\n        if (null !== dieUnderCursor && DRAGGING === state) {\n            const dx = origin.x - event.clientX;\n            const dy = origin.y - event.clientY;\n\n            const {x, y} = dieUnderCursor.coordinates;\n\n            const snapToCoords = board.layout.snapTo({\n                die: dieUnderCursor,\n                x: x - dx,\n                y: y - dy,\n            });\n\n            const newCoords = null != snapToCoords ? snapToCoords : {x, y};\n\n            dieUnderCursor.coordinates = newCoords;\n        }\n\n        // Clear state\n        dieUnderCursor = null;\n        state = NONE;\n\n        // Refresh board; Render dice\n        board._update();\n    };\n\n\n    // Register the actual event listeners defined above. Map touch events to\n    // equivalent mouse events. Because the \"touchend\" event does not have a\n    // clientX and clientY, record and use the last ones from the \"touchmove\"\n    // (or \"touchstart\") events.\n\n    let touchCoordinates = {clientX: 0, clientY: 0};\n    const touch2mouseEvent = (mouseEventName) => {\n        return (touchEvent) => {\n            if (touchEvent && 0 < touchEvent.touches.length) {\n                const {clientX, clientY} = touchEvent.touches[0];\n                touchCoordinates = {clientX, clientY};\n            }\n            canvas.dispatchEvent(new MouseEvent(mouseEventName, touchCoordinates));\n        };\n    };\n\n    canvas.addEventListener(\"touchstart\", touch2mouseEvent(\"mousedown\"));\n    canvas.addEventListener(\"mousedown\", startInteraction);\n\n    if (!board.disabledDraggingDice) {\n        canvas.addEventListener(\"touchmove\", touch2mouseEvent(\"mousemove\"));\n        canvas.addEventListener(\"mousemove\", move);\n    }\n\n    if (!board.disabledDraggingDice || !board.disabledHoldingDice) {\n        canvas.addEventListener(\"mousemove\", showInteraction);\n    }\n\n    canvas.addEventListener(\"touchend\", touch2mouseEvent(\"mouseup\"));\n    canvas.addEventListener(\"mouseup\", stopInteraction);\n    canvas.addEventListener(\"mouseout\", stopInteraction);\n};\n\n/**\n * TopDiceBoardHTMLElement is the \"top-dice-board\" custom HTML element.\n *\n */\nconst TopDiceBoardHTMLElement = class extends HTMLElement {\n\n    /**\n     * Create a new TopDiceBoardHTMLElement.\n     */\n    constructor() {\n        super();\n        this.style.display = \"inline-block\";\n        const shadow = this.attachShadow({mode: \"closed\"});\n        const canvas = document.createElement(\"canvas\");\n        shadow.appendChild(canvas);\n\n        _canvas.set(this, canvas);\n        _currentPlayer.set(this, DEFAULT_SYSTEM_PLAYER);\n        _layout.set(this, new GridLayout({\n            width: this.width,\n            height: this.height,\n            dieSize: this.dieSize,\n            dispersion: this.dispersion\n        }));\n        setupInteraction(this);\n    }\n\n    static get observedAttributes() {\n        return [\n            WIDTH_ATTRIBUTE,\n            HEIGHT_ATTRIBUTE,\n            DISPERSION_ATTRIBUTE,\n            DIE_SIZE_ATTRIBUTE,\n            DRAGGING_DICE_DISABLED_ATTRIBUTE,\n            ROTATING_DICE_DISABLED_ATTRIBUTE,\n            HOLDING_DICE_DISABLED_ATTRIBUTE,\n            HOLD_DURATION_ATTRIBUTE\n        ];\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        const canvas = _canvas.get(this);\n        switch (name) {\n        case WIDTH_ATTRIBUTE: {\n            const width = getPositiveNumber(newValue, parseNumber(oldValue) || DEFAULT_WIDTH);\n            this.layout.width = width;\n            canvas.setAttribute(WIDTH_ATTRIBUTE, width);\n            break;\n        }\n        case HEIGHT_ATTRIBUTE: {\n            const height = getPositiveNumber(newValue, parseNumber(oldValue) || DEFAULT_HEIGHT);\n            this.layout.height = height;\n            canvas.setAttribute(HEIGHT_ATTRIBUTE, height);\n            break;\n        }\n        case DISPERSION_ATTRIBUTE: {\n            const dispersion = getPositiveNumber(newValue, parseNumber(oldValue) || DEFAULT_DISPERSION);\n            this.layout.dispersion = dispersion;\n            break;\n        }\n        case DIE_SIZE_ATTRIBUTE: {\n            const dieSize = getPositiveNumber(newValue, parseNumber(oldValue) || DEFAULT_DIE_SIZE);\n            this.layout.dieSize = dieSize;\n            break;\n        }\n        case ROTATING_DICE_DISABLED_ATTRIBUTE: {\n            const disabledRotation = getBoolean(newValue, ROTATING_DICE_DISABLED_ATTRIBUTE, getBoolean(oldValue, ROTATING_DICE_DISABLED_ATTRIBUTE, DEFAULT_ROTATING_DICE_DISABLED));\n            this.layout.rotate = !disabledRotation;\n            break;\n        }\n        default: \n        }\n\n        this._update();\n    }\n\n    connectedCallback() {\n        this.addEventListener(\"top-die:added\", () => {\n            updateReadyDice(this, 1);\n            if (this._isReady()) {\n                this._update(this.layout.layout(this.dice));\n            }\n        });\n\n        this.addEventListener(\"top-die:removed\", () => {\n            this._update(this.layout.layout(this.dice));\n            updateReadyDice(this, -1);\n        });\n\n        // All dice boards do have a player list. If there isn't one yet,\n        // create one.\n        if (null === this.querySelector(\"top-player-list\")) {\n            this.appendChild(document.createElement(\"top-player-list\"));\n        }\n    }\n\n    disconnectedCallback() {\n    }\n\n    adoptedCallback() {\n    }\n\n    get context() {\n        return _canvas.get(this).getContext(\"2d\");\n    }\n\n    /**\n     * The GridLayout used by this DiceBoard to layout the dice.\n     *\n     * @type {GridLayout}\n     */\n    get layout() {\n        return _layout.get(this);\n    }\n\n    /**\n     * The dice on this board. Note, to actually throw the dice use\n     * @see{throwDice}. \n     *\n     * @type {module:Die~Die[]}\n     */\n    get dice() {\n        return [...this.getElementsByTagName(\"top-die\")];\n    }\n\n    /**\n     * The maximum number of dice that can be put on this board.\n     *\n     * @return {Number} The maximum number of dice, 0 < maximum.\n     */\n    get maximumNumberOfDice() {\n        return this.layout.maximumNumberOfDice;\n    }\n\n    /**\n     * The width of this board.\n     *\n     * @type {Number}\n     */\n    get width() {\n        return getPositiveNumberAttribute(this, WIDTH_ATTRIBUTE, DEFAULT_WIDTH);\n    }\n\n    /**\n     * The height of this board.\n     * @type {Number}\n     */\n    get height() {\n        return getPositiveNumberAttribute(this, HEIGHT_ATTRIBUTE, DEFAULT_HEIGHT);\n    }\n\n    /**\n     * The dispersion level of this board.\n     * @type {Number}\n     */\n    get dispersion() {\n        return getPositiveNumberAttribute(this, DISPERSION_ATTRIBUTE, DEFAULT_DISPERSION);\n    }\n\n    /**\n     * The size of dice on this board.\n     *\n     * @type {Number}\n     */\n    get dieSize() {\n        return getPositiveNumberAttribute(this, DIE_SIZE_ATTRIBUTE, DEFAULT_DIE_SIZE);\n    }\n\n    /**\n     * Can dice on this board be dragged?\n     * @type {Boolean}\n     */\n    get disabledDraggingDice() {\n        return getBooleanAttribute(this, DRAGGING_DICE_DISABLED_ATTRIBUTE, DEFAULT_DRAGGING_DICE_DISABLED);\n    }\n\n    /**\n     * Can dice on this board be held by a Player?\n     * @type {Boolean}\n     */\n    get disabledHoldingDice() {\n        return getBooleanAttribute(this, HOLDING_DICE_DISABLED_ATTRIBUTE, DEFAULT_HOLDING_DICE_DISABLED);\n    }\n\n    /**\n     * Is rotating dice on this board disabled?\n     * @type {Boolean}\n     */\n    get disabledRotatingDice() {\n        return getBooleanAttribute(this, ROTATING_DICE_DISABLED_ATTRIBUTE, DEFAULT_ROTATING_DICE_DISABLED);\n    }\n\n    /**\n     * The duration in ms to press the mouse / touch a die before it bekomes\n     * held by the Player. It has only an effect when this.holdableDice ===\n     * true.\n     *\n     * @type {Number}\n     */\n    get holdDuration() {\n        return getPositiveNumberAttribute(this, HOLD_DURATION_ATTRIBUTE, DEFAULT_HOLD_DURATION);\n    }\n\n    set currentPlayer(newPlayer) {\n        _currentPlayer.set(this, newPlayer);\n    }\n\n    get currentPlayer() {\n        return _currentPlayer.get(this);\n    }\n\n    getPlayer(playerName) {\n        const playerList = this.querySelector(\"top-player-list\");\n        return null === playerList ? null : playerList.find(playerName);\n    }\n\n    throwDice(player = DEFAULT_SYSTEM_PLAYER) {\n        this.dice.forEach(die => die.throwIt());\n        this.currentPlayer = player;\n        this._update(this.layout.layout(this.dice));\n        return this.dice;\n    }\n\n    _isReady() {\n        return getReadyDice(this) === this.dice.length;\n    }\n\n    _update(dice = this.dice) {\n        if (this._isReady()) {\n            this.context.clearRect(0, 0, this.width, this.height);\n\n            for (const die of dice) {\n                die.render(this.context, this.dieSize);\n            }\n        }\n    }\n};\n\nwindow.customElements.define(\"top-dice-board\", TopDiceBoardHTMLElement);\n\n/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n\n//import {ConfigurationError} from \"./error/ConfigurationError.js\";\n\n/**\n * @module\n */\n\nconst NUMBER_OF_PIPS = 6; // Default / regular six sided die has 6 pips maximum.\nconst DEFAULT_COLOR = \"Ivory\";\nconst DEFAULT_X = 0; // px\nconst DEFAULT_Y = 0; // px\nconst DEFAULT_ROTATION = 0; // degrees\nconst DEFAULT_OPACITY = 0.5;\n\nconst BASE_DIE_SIZE = 100; // px\nconst BASE_ROUNDED_CORNER_RADIUS = 15; // px\nconst BASE_STROKE_WIDTH = 2.5; // px\nconst MIN_STROKE_WIDTH = 1; // px\nconst HALF = BASE_DIE_SIZE / 2; // px\nconst THIRD = BASE_DIE_SIZE / 3; // px\nconst PIP_SIZE = BASE_DIE_SIZE / 15; //px\nconst PIP_COLOR = \"black\";\n\nconst deg2rad = (deg) => {\n    return deg * (Math.PI / 180);\n};\n\nconst isPipNumber = n => {\n    const number = parseInt(n, 10);\n    return Number.isInteger(number) && 1 <= number && number <= NUMBER_OF_PIPS;\n};\n\n/**\n * Generate a random number of pips between 1 and the NUMBER_OF_PIPS.\n *\n * @returns {Number} A random number n, 1 ≤ n ≤ NUMBER_OF_PIPS.\n */\nconst randomPips = () => Math.floor(Math.random() * NUMBER_OF_PIPS) + 1;\n\nconst DIE_UNICODE_CHARACTERS = [\"⚀\",\"⚁\",\"⚂\",\"⚃\",\"⚄\",\"⚅\"];\n\n/**\n * Convert a number of pips, 1 ≤ pips ≤ 6 to a unicode character\n * representation of the corresponding die face. This function is the reverse\n * of unicodeToPips.\n *\n * @param {Number} p - The number of pips to convert to a unicode character.\n * @returns {String|undefined} The corresponding unicode characters or\n * undefined if p was not between 1 and 6 inclusive.\n */\nconst pipsToUnicode = p => isPipNumber(p) ? DIE_UNICODE_CHARACTERS[p - 1] : undefined;\n\n\nconst renderHold = (context, x, y, width, color) => {\n    const SEPERATOR = width / 30;\n    context.save();\n    context.globalAlpha = DEFAULT_OPACITY;\n    context.beginPath();\n    context.fillStyle = color;\n    context.arc(x + width, y + width, width - SEPERATOR, 0, 2 * Math.PI, false);\n    context.fill();\n    context.restore();\n};\n\nconst renderDie = (context, x, y, width, color) => {\n    const SCALE = (width / HALF);\n    const HALF_INNER_SIZE = Math.sqrt(width ** 2 / 2);\n    const INNER_SIZE = 2 * HALF_INNER_SIZE;\n    const ROUNDED_CORNER_RADIUS = BASE_ROUNDED_CORNER_RADIUS * SCALE;\n    const INNER_SIZE_ROUNDED = INNER_SIZE - 2 * ROUNDED_CORNER_RADIUS;\n    const STROKE_WIDTH = Math.max(MIN_STROKE_WIDTH, BASE_STROKE_WIDTH * SCALE);\n\n    const startX = x + width - HALF_INNER_SIZE + ROUNDED_CORNER_RADIUS;\n    const startY = y + width - HALF_INNER_SIZE;\n\n    context.save();\n    context.beginPath();\n    context.fillStyle = color;\n    context.strokeStyle = \"black\";\n    context.lineWidth = STROKE_WIDTH;\n    context.moveTo(startX, startY);\n    context.lineTo(startX + INNER_SIZE_ROUNDED, startY);\n    context.arc(startX + INNER_SIZE_ROUNDED, startY + ROUNDED_CORNER_RADIUS, ROUNDED_CORNER_RADIUS, deg2rad(270), deg2rad(0));\n    context.lineTo(startX + INNER_SIZE_ROUNDED + ROUNDED_CORNER_RADIUS, startY + INNER_SIZE_ROUNDED + ROUNDED_CORNER_RADIUS);\n    context.arc(startX + INNER_SIZE_ROUNDED, startY + INNER_SIZE_ROUNDED + ROUNDED_CORNER_RADIUS, ROUNDED_CORNER_RADIUS, deg2rad(0), deg2rad(90));\n    context.lineTo(startX, startY + INNER_SIZE);\n    context.arc(startX, startY + INNER_SIZE_ROUNDED + ROUNDED_CORNER_RADIUS, ROUNDED_CORNER_RADIUS, deg2rad(90), deg2rad(180));\n    context.lineTo(startX - ROUNDED_CORNER_RADIUS, startY + ROUNDED_CORNER_RADIUS);\n    context.arc(startX, startY + ROUNDED_CORNER_RADIUS, ROUNDED_CORNER_RADIUS, deg2rad(180), deg2rad(270));\n\n    context.stroke();\n    context.fill();\n    context.restore();\n};\n\nconst renderPip = (context, x, y, width) => {\n    context.save();\n    context.beginPath();\n    context.fillStyle = PIP_COLOR;\n    context.moveTo(x, y);\n    context.arc(x, y, width, 0, 2 * Math.PI, false);\n    context.fill();\n    context.restore();\n};\n\n\nconst _board = new WeakMap();\nconst _pips = new WeakMap();\nconst _x = new WeakMap();\nconst _y = new WeakMap();\nconst _rotation = new WeakMap();\nconst _heldBy = new WeakMap();\n\n/**\n * TopDieHTMLElement is the \"top-die\" custom HTML element representing a die\n * on the dice board.\n */\nconst TopDieHTMLElement = class extends HTMLElement {\n    constructor() {\n        super();\n\n        _pips.set(this, 0);\n        _x.set(this, 0);\n        _y.set(this, 0);\n        _rotation.set(this, 0);\n        _heldBy.set(this, null);\n    }\n\n    static get observedAttributes() {\n        return [\"x\", \"y\", \"rotation\"];\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n    }\n\n    connectedCallback() {\n        _board.set(this, this.parentNode);\n        // Ensure every die has a pips, 1 <= pips <= 6\n        let pips = NaN;\n        if (this.hasAttribute(\"pips\")) {\n            pips = parseInt(this.getAttribute(\"pips\"), 10);\n        }\n\n        if (Number.isNaN(pips) || 1 > pips || 6 < pips) {\n            pips = randomPips();\n            this.setAttribute(\"pips\", pips);\n        }\n\n        _pips.set(this, pips);\n\n        _board.get(this).dispatchEvent(new Event(\"top-die:added\"));\n    }\n\n    disconnectedCallback() {\n        _board.get(this).dispatchEvent(new Event(\"top-die:removed\"));\n    }\n\n    /**\n     * Convert this Die to the corresponding unicode character of a die face.\n     *\n     * @return {String} The unicode character corresponding to the number of\n     * pips of this Die.\n     */\n    toUnicode() {\n        return pipsToUnicode(this.pips);\n    }\n\n    /**\n     * This Die's number of pips, 1 ≤ pips ≤ 6.\n     *\n     * @type {Number}\n     */\n    get pips() {\n        return parseInt(this.getAttribute(\"pips\"), 10);\n    }\n\n    /**\n     * This Die's color.\n     *\n     * @type {String}\n     */\n    get color() {\n        return this.hasAttribute(\"color\") ? this.getAttribute(\"color\") : DEFAULT_COLOR;\n    }\n\n    /**\n     * The Player that is holding this Die, if any. Null otherwise.\n     *\n     * @type {Player|null} \n     */\n    get heldBy() {\n        const playerName = this.hasAttribute(\"held-by\") ? this.getAttribute(\"held-by\") : null;\n        return _board.get(this).getPlayer(playerName);\n    }\n    set heldBy(player) {\n        if (null === player) {\n            this.removeAttribute(\"held-by\");\n        } else {\n            this.setAttribute(\"held-by\", player.toString());\n        }\n    }\n\n    /**\n     * The coordinates of this Die.\n     *\n     * @type {Coordinates|null}\n     */\n    get coordinates() {\n        return null === this.x || null === this.y ? null : {x: this.x, y: this.y};\n    }\n    set coordinates(c) {\n        if (null === c) {\n            this.x = null;\n            this.y = null;\n        } else{\n            const {x, y} = c;\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    /**\n     * Does this Die have coordinates?\n     *\n     * @return {Boolean} True when the Die does have coordinates\n     */\n    hasCoordinates() {\n        return null !== this.coordinates;\n    }\n\n    get x() {\n        return this.hasAttribute(\"x\") ? parseInt(this.getAttribute(\"x\"), 10) : DEFAULT_X;\n    }\n    set x(newX) {\n        this.setAttribute(\"x\", newX);\n    }\n\n    get y() {\n        return this.hasAttribute(\"y\") ? parseInt(this.getAttribute(\"y\"), 10) : DEFAULT_Y;\n    }\n    set y(newY) {\n        this.setAttribute(\"y\", newY);\n    }\n\n    /**\n     * The rotation of this Die.\n     *\n     * @type {Number} The rotation of this Die, 0 ≤ rotation ≤ 360.\n     */\n    get rotation() {\n        return this.hasAttribute(\"rotation\") ? parseInt(this.getAttribute(\"rotation\"), 10) : DEFAULT_ROTATION;\n    }\n    set rotation(newR) {\n        if (null === newR) {\n            this.removeAttribute(\"rotation\");\n        } else {\n            this.setAttribute(\"rotation\", newR);\n        }\n    }\n\n    /**\n     * Throw this Die. The number of pips to a random number n, 1 ≤ n ≤ 6.\n     * Only dice that are not being held can be thrown.\n     *\n     * @fires \"top:throw-die\" with parameters this Die.\n     */\n    throwIt() {\n        if (!this.isHeld()) {\n            this.setAttribute(\"pips\", randomPips());\n            this.dispatchEvent(new CustomEvent(\"top:throw-die\", {detail: {\n                die: this\n            }}));\n        }\n    }\n\n    /**\n     * The player holds this Die. A player can only hold a die that is not\n     * being held by another player yet.\n     *\n     * @param {module:Player~Player} player - The player who wants to hold this Die.\n     * @fires \"top:hold-die\" with parameters this Die and the player.\n     */\n    holdIt(player) {\n        if (!this.isHeld()) {\n            this.heldBy = player;\n            this.dispatchEvent(new CustomEvent(\"top:hold-die\", {detail: {\n                die: this,\n                player\n            }}));\n        }\n    }\n\n    /**\n     * Is this Die being held by any player?\n     *\n     * @return {Boolean} True when this Die is being held by any player, false otherwise.\n     */\n    isHeld() {\n        return this.hasAttribute(\"held-by\");\n    }\n\n    /**\n     * The player releases this Die. A player can only release dice that she is\n     * holding.\n     *\n     * @param {module:Player~Player} player - The player who wants to release this Die.\n     * @fires \"top:relase-die\" with parameters this Die and the player releasing it.\n     */\n    releaseIt(player) {\n        if (this.isHeld() && this.heldBy.equals(player)) {\n            this.heldBy = null;\n            this.dispatchEvent(new CustomEvent(\"top:release-die\", {detail: {\n                die: this,\n                player\n            }}));\n        }\n    }\n\n    render(context, dieSize, coordinates = this.coordinates) {\n        const scale = dieSize / BASE_DIE_SIZE;\n        const SHALF = HALF * scale;\n        const STHIRD = THIRD * scale;\n        const SPIP_SIZE = PIP_SIZE * scale;\n\n\n        const {x, y} = coordinates;\n\n        if (this.isHeld()) {\n            renderHold(context, x, y, SHALF, this.heldBy.color);\n        }\n\n        if (0 !== this.rotation) {\n            context.translate(x + SHALF, y + SHALF);\n            context.rotate(deg2rad(this.rotation));\n            context.translate(-1 * (x + SHALF), -1 * (y + SHALF));\n        }\n\n        renderDie(context, x, y, SHALF, this.color);\n\n        switch (this.pips) {\n        case 1: {\n            renderPip(context, x + SHALF, y + SHALF, SPIP_SIZE);\n            break;\n        }\n        case 2: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            break;\n        }\n        case 3: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + SHALF, y + SHALF, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            break;\n        }\n        case 4: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + STHIRD, SPIP_SIZE);\n            break;\n        }\n        case 5: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + SHALF, y + SHALF, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + STHIRD, SPIP_SIZE);\n            break;\n        }\n        case 6: {\n            renderPip(context, x + STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + STHIRD, y + SHALF, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + 2 * STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + STHIRD, SPIP_SIZE);\n            renderPip(context, x + 2 * STHIRD, y + SHALF, SPIP_SIZE);\n            break;\n        }\n        default: // No other values allowed / possible\n        }\n\n        // Clear context\n        context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n};\n\nwindow.customElements.define(\"top-die\", TopDieHTMLElement);\n\n/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\n/**\n * TopPlayerListHTMLElement to describe the players in the game\n */\nconst TopPlayerListHTMLElement = class extends HTMLElement {\n    constructor() {\n        super();\n    }\n\n    static get observedAttributes() {\n        return [];\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n    }\n\n    connectedCallback() {\n        this.appendChild(DEFAULT_SYSTEM_PLAYER);\n    }\n\n    disconnectedCallback() {\n    }\n\n    get players() {\n        return [...this.getElementsByTagName(\"top-player\")];\n    }\n\n    contains(player) {\n        return this.players.filter(p => p.equals(player));\n    }\n\n    find(player) {\n        const foundPlayers = this.players.filter(p => p.equals(player));\n        return 0 === foundPlayers.length ? null : foundPlayers[0];\n    }\n\n\n};\n\nwindow.customElements.define(\"top-player-list\", TopPlayerListHTMLElement);\n\n/**\n * Copyright (c) 2018 Huub de Beer\n *\n * This file is part of twenty-one-pips.\n *\n * Twenty-one-pips is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n *\n * Twenty-one-pips is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with twenty-one-pips.  If not, see <http://www.gnu.org/licenses/>.\n * @ignore\n */\nwindow.twentyonepips = {\n    version: \"0.0.1\",\n    TopDiceBoard: TopDiceBoardHTMLElement,\n    TopDie: TopDieHTMLElement,\n    TopPlayer: TopPlayerHTMLElement,\n    TopPlayerList: TopPlayerListHTMLElement\n};\n"]}